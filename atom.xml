<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>疆域·知识库</title>
  
  <subtitle>山寒的个人知识库</subtitle>
  <link href="https://blog.jiang4yu.com/atom.xml" rel="self"/>
  
  <link href="https://blog.jiang4yu.com/"/>
  <updated>2024-03-30T06:44:25.400Z</updated>
  <id>https://blog.jiang4yu.com/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.jiang4yu.com/2024/03/30/hello-world/"/>
    <id>https://blog.jiang4yu.com/2024/03/30/hello-world/</id>
    <published>2024-03-30T06:44:25.400Z</published>
    <updated>2024-03-30T06:44:25.400Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo博客开发</title>
    <link href="https://blog.jiang4yu.com/2024/03/26/hexo-blog-development-1tmmyu/"/>
    <id>https://blog.jiang4yu.com/2024/03/26/hexo-blog-development-1tmmyu/</id>
    <published>2024-03-26T04:02:33.000Z</published>
    <updated>2024-03-26T04:04:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<span style="font-weight: bold;" class="bold">Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</span></p><p>　　<span style="font-weight: bold;" class="bold">GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</span></p><h2 id="安装hexo环境"><a href="#安装hexo环境" class="headerlink" title="安装hexo环境"></a>安装hexo环境</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><ul><li><span style="font-weight: bold;" class="bold">安装 Git</span></li><li><span style="font-weight: bold;" class="bold">安装 Node.js</span></li></ul><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><pre><code>npm install -g hexo-cli# 或者npm install hexo</code></pre><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><pre><code>hexo new &quot;name&quot;       # 新建文章hexo new page &quot;name&quot;  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助</code></pre><h2 id="构建基础网站"><a href="#构建基础网站" class="headerlink" title="构建基础网站"></a>构建基础网站</h2><p>　　<span style="font-weight: bold;" class="bold">安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</span></p><pre><code># 初始化hexo init &lt;folder&gt;# 进入站点目录cd &lt;folder&gt;# 安装组件npm install# 生成页面hexo g# 启动预览hexo s</code></pre><ul><li><span style="font-weight: bold;" class="bold">注意：将</span><span style="font-weight: bold;" class="bold">&lt;folder&gt;</span> 替换为你的目录文件夹</li><li>**访问 **<code>http://localhost:4000</code>​，出现 Hexo 默认页面，本地博客安装成功！</li><li>**如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <span style="font-weight: bold;" class="bold"><code>hexo server -p 5000</code>​ 更改端口号后重试。</span></li></ul><p>　　新建完成后，在 folder 文件夹下将会产生如下目录**</p><pre><code>.├── .github├── node_modules├── _config.yml             # 网站的配置信息├── _config.landscape.yml   # 网站的默认主题配置信息├── package.json            # 引用程序的信息├── scaffolds               # 模板文件夹|   ├── draft.md|   ├── page.md|   └── post.md├── source                  # 资源文件夹|   ├── _drafts|   └── _posts|       └── hello-world.md├── themes                  # 主题文件夹|   └── .gitkeep└── public                  # 网站文件</code></pre><ul><li><p><span style="font-weight: bold;" class="bold">_config.yml 网站的</span>​<a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，在这个文件中可以配置网站相关的大部分信息</p></li><li><p><span style="font-weight: bold;" class="bold">package.json 网站应用程序信息，默认安装了 </span><a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 渲染引擎和 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>主题</p><ul><li><pre><code>&#123;  &quot;name&quot;: &quot;hexo-site&quot;,  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;hexo generate&quot;,    &quot;clean&quot;: &quot;hexo clean&quot;,    &quot;deploy&quot;: &quot;hexo deploy&quot;,    &quot;server&quot;: &quot;hexo server&quot;  &#125;,  &quot;hexo&quot;: &#123;    &quot;version&quot;: &quot;&quot;  &#125;,  &quot;dependencies&quot;: &#123;    &quot;hexo&quot;: &quot;^7.0.0&quot;,    &quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;,    &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,    &quot;hexo-generator-index&quot;: &quot;^3.0.0&quot;,    &quot;hexo-generator-tag&quot;: &quot;^2.0.0&quot;,    &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,    &quot;hexo-renderer-marked&quot;: &quot;^6.0.0&quot;,    &quot;hexo-renderer-stylus&quot;: &quot;^3.0.0&quot;,    &quot;hexo-server&quot;: &quot;^3.0.0&quot;,    &quot;hexo-theme-landscape&quot;: &quot;^1.0.0&quot;  &#125;&#125;</code></pre></li></ul></li><li><p><span style="font-weight: bold;" class="bold">scaffolds </span><a href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89">模版</a> 文件夹，新建文章时，Hexo 会根据 scaffold 来创建文件。</p></li><li><p><span style="font-weight: bold;" class="bold">source 资源文件夹是存放用户资源的地方</span></p></li><li><p><span style="font-weight: bold;" class="bold">themes </span><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹</p></li></ul><p>　　​<img src="http://127.0.0.1:6806/assets/image-20231220144501782-20240326120406-0knb99k.png" alt="image-20231220144501782">​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　&lt;span style=&quot;font-weight: bold;&quot; class=&quot;bold&quot;&gt;Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。&lt;/span&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>001.企业级CentOS7.6操作系统的安装</title>
    <link href="https://blog.jiang4yu.com/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/"/>
    <id>https://blog.jiang4yu.com/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/</id>
    <published>2024-01-07T17:11:07.000Z</published>
    <updated>2024-03-30T06:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-准备系统镜像"><a href="#1-准备系统镜像" class="headerlink" title="1. 准备系统镜像"></a>1. 准备系统镜像</h2><ul><li>官网：<a href="https://wiki.centos.org/Download">https://wiki.centos.org/Download</a><br>官网列出了很多国内镜像站地址</li><li>阿里云：<a href="https://mirrors.aliyun.com/centos-vault/">https://mirrors.aliyun.com/centos-vault/</a><br>iso文件在每个版本目录的isos目录下，例如CentOS-7.6.1810的镜像在<a href="https://mirrors.aliyun.com/centos-vault/7.6.1810/isos">https://mirrors.aliyun.com/centos-vault/7.6.1810/isos</a>目录下</li></ul><h2 id="2-创建虚拟机"><a href="#2-创建虚拟机" class="headerlink" title="2. 创建虚拟机"></a>2. 创建虚拟机</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-be9c08adf4640b06-20240108011108-fshw1kg.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-1175e2bfe7a8701b-20240108011108-kfvgz8b.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-732409d3371f2f8c-20240108011108-scxf0sg.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-db3037758ede7feb-20240108011108-6lmpvct.png">​</p><p>　　在选择好系统镜像之后，如果选择<code>安装程序光盘映像文件</code>​，会自动安装系统，虽然方便，但是会安装太多的服务和程序，并且会自动分区，所有我们选择<code>稍后安装系统</code>​来手动的安装系统。</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-a331f81adac56118-20240108011108-nnb5ig7.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-fd9faacb2a683075-20240108011108-2ho414v.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-7ffc1941d036a430-20240108011108-fc53h54.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-e255eef242b73791-20240108011108-7g67d20.png">​</p><table><thead><tr><th>系统版本</th><th>安装所需内存</th><th>启动所需内存</th></tr></thead><tbody><tr><td>CentOS-5</td><td>256M</td><td>100M</td></tr><tr><td>CentOS-6</td><td>最少512M，建议1GB+</td><td>最少512M，建议1GB+</td></tr><tr><td>CentOS-7</td><td>最少512M，建议1GB+</td><td>最少512M，建议1GB+</td></tr></tbody></table><p>　　如果安装时内存小于最低推荐内存，可能会报错，另外建议安装的时候时候设置的大一些，例如2GB，后面根据本地资源使用情况再做调整</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-a49fa05f243a2382-20240108011108-dphe43s.png">​</p><p>　　以下对网络类型进行简单介绍：</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-1977e244f9048582-20240108011108-wt8huhi.png">​</p><ul><li>NAT(Network Address Translation)：网络地址转换，虚拟机通过宿主机进行上网和交换数据。在NAT模式下，虚拟机的网卡连接到宿主机的VMnet8上，宿主机中的VMware NAT Service服务充当了路由器的角色，负责将虚拟机发送到VMnet8的包进行地址转换之后再发送到实际的网络上，同理，将实际网络上返回的包进行地址转换后通过VMnet8发送给虚拟机，VMware DHCP Service负责为虚拟机分配分配IP地址。NAT网络适用于宿主机直连网线或者办公室的局域网环境，优点是不会于其他物理机的IP发生冲突，更换网络环境后，虚拟机的IP不会受到影响，推荐使用NAT模式。</li><li>Bridged(桥接模式)：虚拟机可以分配于宿主机相同网段的独立IP，所有网络功能几乎与真实机器完全一样，虚拟机直接连接到真实网络中，适用场景：局域网环境，优点：远程机器可以通过路由器访问到虚拟机，缺点：与宿主机通信都会走真实的路由器，且可能会造成IP冲突，更换网络环境后，所有虚拟机的IP都会受影响。</li><li>Host-only(仅主机模式)：虚拟机不能访问外网，只能与宿主机通信</li></ul><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-c726400dda3f8465-20240108011108-hng56hm.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-e4741b7a74043d59-20240108011108-blivk0e.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-142ee182861d718d-20240108011108-m0p1dgo.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-eb9f889c8bde85bd-20240108011108-ew93nyd.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-c89135549e2beab6-20240108011108-3ec34o9.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-ae7695423e3e16a7-20240108011108-74c8nt0.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-73727bc65da1400a-20240108011108-xmvk3m7.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-3dd08fc10d34d1a1-20240108011108-10p782o.png">​</p><h2 id="3-虚拟主机网络配置"><a href="#3-虚拟主机网络配置" class="headerlink" title="3. 虚拟主机网络配置"></a>3. 虚拟主机网络配置</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-10eff8d6a775e36d-20240108011108-ktuayww.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-b7dac228d065b432-20240108011108-kys9w2o.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-fee57323f47e2bb0-20240108011108-cidetdl.png">​</p><h2 id="4-系统安装"><a href="#4-系统安装" class="headerlink" title="4. 系统安装"></a>4. 系统安装</h2><h2 id="4-1-进入系统安装引导界面"><a href="#4-1-进入系统安装引导界面" class="headerlink" title="4.1 进入系统安装引导界面"></a>4.1 进入系统安装引导界面</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-e9e6bc6928b1f745-20240108011108-aqo0w1w.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-1476dd880fbb4e47-20240108011108-69zu4w2.png">​</p><p>　　提示：虚拟机界面与Windows界面鼠标切换：Ctrl + Alt</p><h2 id="4-2-修改网卡名为eth0的形式-与CentOS7以前保持一致"><a href="#4-2-修改网卡名为eth0的形式-与CentOS7以前保持一致" class="headerlink" title="4.2 修改网卡名为eth0的形式(与CentOS7以前保持一致)"></a>4.2 修改网卡名为eth0的形式(与CentOS7以前保持一致)</h2><ul><li>为了统一企业中的多版本系统共存的环境，这里将网卡名称设置为”eth*“的形式，不使用CentOS7默认的特殊网卡命名规则，相关说明如下：<br>CentOS7以前的ethX数字编号的网卡命名方式往往不一定能准确对应网卡接口的物理顺序，CentOS7的网卡默认命名方式可以解决这一问题，但同时也为Linux系统管理员带来了额外的困扰，即无法兼容CentOS6的环境以及使用习惯，所以一般都还是会改回早期的eth0、eth1这样的网卡命名方式，具体修改内核参数组合如下，默认内核参数(biosdevname&#x3D;0,net.ifnames&#x3D;1)，网卡名如”enp5s2”，如果biosdevname&#x3D;1，net.ifnames&#x3D;0，网卡名如”em1”，如果biosdevname&#x3D;0，net.ifnames&#x3D;0，网卡名如”eth0”(传统的方式)</li><li>所以在初始安装的时候，需要增加内核参数（也可以在系统安装之后再配置，参考<a href="https://blog.51cto.com/oldboy/1722101">https://blog.51cto.com/oldboy/1722101</a>）， 先选中<code>Install CentOS 7</code>​，按Tab键进入内核参数配置界面，并手动输入以下参数，输入完成之后，按Enter即可进入下一步，随后也会看到按Enter的提示，等待即可</li></ul><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-962691991765a923-20240108011108-tl3s8u2.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-ce00c42c387fd768-20240108011108-w3lntwc.png">​</p><p>　　在系统安装好之后也可以修改网卡名称，操作如下：</p><pre><code class="shell"># 1. 修改/etc/sysconfig/network-scripts/ifcfg-ens33文件NAME=eth0DEVICE=eth0# 2. 网卡设备文件重命名mv /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-eth0# 3. 修改/etc/default/grub文件，添加如下内容GRUB_CMDLINE_LINUX=&quot;biosdevname=0 net.ifnames=0 rhgb quiet&quot;# 4.系统重新加载grub配置文件grub2-mkconfig -o /boot/grub2/grub.cfg</code></pre><h2 id="4-3-选择语言，建议选择英文"><a href="#4-3-选择语言，建议选择英文" class="headerlink" title="4.3 选择语言，建议选择英文"></a>4.3 选择语言，建议选择英文</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-8621ef876c1304c5-20240108011108-ix6zjel.png">​</p><p>　　如果由于分辨率问题导致Continue按钮看不到，就需要进入全屏模式：</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-3d357a14e17104d8-20240108011108-zu918dl.png">​</p><h2 id="4-4-安装摘要页面-INSTALLATION-SUMMARY"><a href="#4-4-安装摘要页面-INSTALLATION-SUMMARY" class="headerlink" title="4.4 安装摘要页面(INSTALLATION SUMMARY)"></a>4.4 安装摘要页面(INSTALLATION SUMMARY)</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-6d528129e749c63b-20240108011109-da9j6md.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-a3a115e9ab85051a-20240108011109-lnrf7do.png">​</p><h2 id="4-5-配置系统时区和时间-DATE-amp-TIME"><a href="#4-5-配置系统时区和时间-DATE-amp-TIME" class="headerlink" title="4.5 配置系统时区和时间(DATE&amp;TIME)"></a>4.5 配置系统时区和时间(DATE&amp;TIME)</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-a87e04c6a0f0ad4e-20240108011109-5dc2w5e.png">​</p><h2 id="4-6-选择额外的语言支持-LANGUAGE-SUPPORT"><a href="#4-6-选择额外的语言支持-LANGUAGE-SUPPORT" class="headerlink" title="4.6 选择额外的语言支持(LANGUAGE SUPPORT)"></a>4.6 选择额外的语言支持(LANGUAGE SUPPORT)</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-5242fed1ffb8d2d2-20240108011109-nr2xhfo.png">​</p><h2 id="4-7-系统软件包选择-SOFTWARE-SELECTION"><a href="#4-7-系统软件包选择-SOFTWARE-SELECTION" class="headerlink" title="4.7 系统软件包选择(SOFTWARE SELECTION)"></a>4.7 系统软件包选择(SOFTWARE SELECTION)</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-353ef74b4038bcc2-20240108011109-45susyy.png">​</p><p>　　根据经验，选择安装包时应该采用最小化原则，即不需要的或不确定是否需要的东西就不安装，即”Minimal Install”，这样可以最大程度上确保系统安全。</p><p>　　如果安装过程中落下了部分组件，或者是其他伙伴安装时未选择，那么在安装完成之后可以通过如下方式补上未安装的组件：</p><p>　　补充安装”Compatibility Libraries”、”Base”和”Development tools”这3个组件的命令为：</p><pre><code class="shell">yum group install &quot;Compatibility libraries&quot; &quot;Base&quot; &quot;Development tools&quot;</code></pre><p>　　补充安装”Debugging Tools”、”Dial-up Networking Support”这两个组件的命令为：</p><pre><code class="shell">yum group install &quot;debugging Tools&quot; &quot;Dial-up Networking Support&quot;</code></pre><p>　　可以通过<code>yum groupinfo [package-name]</code>​ 来查看安装的包。</p><h2 id="4-8-配置网络和主机名-NETWORK-amp-HOSTNAME"><a href="#4-8-配置网络和主机名-NETWORK-amp-HOSTNAME" class="headerlink" title="4.8 配置网络和主机名(NETWORK&amp;HOSTNAME)"></a>4.8 配置网络和主机名(NETWORK&amp;HOSTNAME)</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-25455d52b1df5764-20240108011109-oebcbf7.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-fec3b95a3771bde0-20240108011109-exzicve.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-490cf37c6f400018-20240108011109-mpzqr8f.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-0ebb7244f2c99b84-20240108011109-j4desq1.png">​</p><h2 id="4-9-选择磁盘分区，配置分区-INSTALLATION-DESTINATION"><a href="#4-9-选择磁盘分区，配置分区-INSTALLATION-DESTINATION" class="headerlink" title="4.9 选择磁盘分区，配置分区(INSTALLATION DESTINATION)"></a>4.9 选择磁盘分区，配置分区(INSTALLATION DESTINATION)</h2><p>　　Linux磁盘分区知识简介</p><ul><li>磁盘在使用之前一般要先分区（相当于买的房要分几居一样）</li><li>磁盘分区有主分区、扩展分区和逻辑分区之分。一块磁盘最多可以有4个主分区，其中，一个主分区的位置可以用一个扩展分区来替换，在这个扩展分区内可以划分多个逻辑分区</li><li>如果规划的分区数量超过4个，则分区组合可为3primary(p)+1extend(e)或者2p+1e或1p+1e</li><li>一块磁盘最多只能有一个扩展分区，扩展分区不能直接使用，必须在扩展分区上划分逻辑分区，然后格式化(创建文件系统)，之后才能存取数据或者装系统</li></ul><p>　　磁盘分区命名以及编号方式</p><ol><li><p>以设备名命名<br> 在Linux系统中，磁盘设备对应于系统中的特殊文件，这些特殊的文件放在”&#x2F;dev”目录中，不同的设备对应的设备名称具体如下：</p><ul><li>系统的第一块IDE接口的硬盘名称为&#x2F;dev&#x2F;hda</li><li>系统的第二块IDE接口的硬盘名称为&#x2F;dev&#x2F;hdb</li><li>系统的第一块SCSI接口的硬盘名称为&#x2F;dev&#x2F;sda</li><li>系统的第二块SCSI接口的硬盘名称为&#x2F;dev&#x2F;sdb</li></ul></li><li><p>使用数字编号<br> 为了表示不同的分区，通常会使用数字进行编号，比如：</p><ul><li>系统的第一块IDE接口的硬盘的第一个分区名称为&#x2F;dev&#x2F;hda1</li><li>系统的第一块IDE接口的硬盘的第五个分区名称为&#x2F;dev&#x2F;hda5</li><li>系统的第二块SCSI接口的硬盘的第一个分区名称&#x2F;dev&#x2F;sdb1</li><li>系统的第二块SCSI接口的硬盘的第五个分区名称&#x2F;dev&#x2F;sdb5</li></ul><p> 对分区进行编号时，数字1-4只能留给主分区或者扩展分区，在安装时由系统自行完成创建</p></li></ol><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-a4bb271d1d931a59-20240108011109-knnt8wz.png">​</p><p>　　点击”Done”进入分区设置页面：</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-ee9775d8c9a813d3-20240108011109-apw136p.png">​</p><p>　　说明：</p><p>　　LVM的意思是逻辑卷管理，它可以对设置好的分区大小进行动态调整，前提是所有的分区格式都需要事先做成LVM分区格式，即分区标号为8e，企业环境的分区一般都是按需求实现规划好的，极少有后续调整的需求，且LVM的性能和标准分区及硬件RAID卡相比还是有一定的差距的，因此，如果没有特殊需求，则不会选择LVM功能分区，而是使用更优秀的标准分区模式”Standard Partition”。</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-f6892d9157496aa7-20240108011109-51a41kq.png">​</p><p>　　Linux系统对分区的基本要求</p><ul><li>最好要有一个根(&#x2F;)分区，用来存放系统文件及程序，大小在5GB以上</li><li>要有一个交换(swap)分区，它的作用相当于Windows的虚拟内存，swap分区的大小一般为物理内存容量的1.5倍(内存&lt;8GB)，当系统物理内存大于8GB时，swap分区配置8-16GB即可，太大无用，浪费磁盘空间。swap分区不是必须的，但是大多数情况下还是设置一下比较好，个别企业的数据库应用场景不分swap。</li><li>&#x2F;boot分区，这是Linux系统的引导分区，用于存放系统引导文件，如Linux内核等。对CentOS7而言，这个分区要比之前的版本大一点，可设置为1024MB，这个分区也不是必须的</li></ul><p>　　企业生产场景中Linux的分区方案</p><ol><li><p>方案一：针对网站集群架构中的某个节点服务器分区，该服务器上的数据包含多份(其他节点也有)且数据不太重要，建议的分区方式如下：</p><ul><li>&#x2F;boot：512~1024MB</li><li>&#x2F;swap：当物理内存小于8GB时，设置为物理内存的1.5倍，当物理内存大于等于8GB时，分配8-16GB，建议给8GB就可以了</li><li>&#x2F;：硬盘剩余空间大小（&#x2F;usr、&#x2F;home、&#x2F;var等分区和”&#x2F;“共用一个分区，这就相当于是在Windows系统中只有一个C盘一样，所有数据和系统文件都存放在一起）</li></ul></li><li><p>方案二：针对数据库及存储角色的服务器分区，该服务器的业务包含了大量重要的数据，建议分区方式如下：</p><ul><li>&#x2F;boot：512~1024MB</li><li>&#x2F;swap：当物理内存小于8GB时，设置为物理内存的1.5倍，当物理内存大于等于8GB时，分配8-16GB，建议给8GB就可以了</li><li>&#x2F;：大小设置为50~200GB，只存放系统相关文件，网站等的业务数据不放在这里</li><li>&#x2F;data：剩余硬盘空间大小，存放数据库及存储服务等重要数据，当然，data这个名称可以自定义</li></ul><p> 方案二就是将重要数据单独分区，以便于备份和管理</p></li><li><p>方案三：针对大网站或者门户级别企业的服务器进行分区</p><ul><li>&#x2F;boot：512~1024MB</li><li>&#x2F;swap：当物理内存小于8GB时，设置为物理内存的1.5倍，当物理内存大于等于8GB时，分配8-16GB，建议给8GB就可以了</li><li>&#x2F;：大小设置为50~200GB，只存放系统相关文件，网站等的业务数据不放在这里</li></ul><p> 保留剩余的磁盘空间，不再进行分区，将来分配给不同的使用部门，由他们自己根据需求再分，此种分区方案更加灵活，比较适合也业务线比较多且需求不确定的大企业使用</p></li><li><p>不推荐的分区方案：<br> 手动对&#x2F;usr、&#x2F;home、&#x2F;var等进行分区，这样分配了太多额外的分区，没有必要，导致管理麻烦，不推荐这种分区方式</p></li></ol><p>　　本文使用方案一来分区：</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-40eac5768e5d710a-20240108011109-dpu1duz.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-6f04769758fc47c9-20240108011109-104crzq.png">​</p><ul><li><p>Mount Point：挂载点，这是Linux访问磁盘分区的入口，即如果要往&#x2F;boot分区(&#x2F;dev&#x2F;sda1)里写入数据，则必须通过&#x2F;boot入口来写入</p></li><li><p>File System：文件系统类型，磁盘分区只有在设置了文件系统类型，格式化并挂载到挂载点之后，分区才能存放数据，常用的文件系统类型如下：</p><ul><li>xfs：一个优秀的文件系统类型，在CentOS7中作为默认的文件系统类型替换了ext4</li><li>ext2&#x2F;ext3&#x2F;ext4：一种适合于Linux的文件系统类型，ext3多出了日志记录功能，因此系统恢复起来会更快速，ext4是ext3的升级，效率更高，CentOS6默认使用的是ext4</li><li>physical volume(LVM)：一种弹性调整文件系统大小的机制，即可以让文件系统变大或者变小，而无须改变原有文件数据的内容，功能不错，但性能会有所下降</li><li>swap：内存交换空间，由于swap并不会使用到目录树的挂载，所以不需要指定挂载点</li><li>vfat：同时支持Linux和Windows的文件系统类型，如果主机同时存在Windows与Linux两种操作系统，存在数据交换需求，就可以使用这种文件系统类型</li></ul></li></ul><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-f4d09a3982419383-20240108011109-ngoua5r.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-a4404f9bf296fe6e-20240108011109-09qlkgu.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-1ba92f7969de45b9-20240108011109-jo1ynct.png">​</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-cb84870a19ed87bb-20240108011109-mkbfq2t.png">​</p><p>　　点击”Done”:</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-acf7ce23881a9af9-20240108011109-xhi70ww.png">​</p><p>　　注意：检查一下是不是所有的分区(&#x2F;、&#x2F;boot、swap)都是Standard Partition。</p><h2 id="4-10-系统安全相关"><a href="#4-10-系统安全相关" class="headerlink" title="4.10 系统安全相关"></a>4.10 系统安全相关</h2><ul><li>KDUMP：将宕机前系统内存异常信息进行保存<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-49d17e35dd0ca4ba-20240108011109-ne0mv7z.png">​</li><li>SECURITY POLICY：系统的安全策略配置<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-6de50ed1232490e6-20240108011109-n23grll.png">​</li></ul><h2 id="4-11-系统安装"><a href="#4-11-系统安装" class="headerlink" title="4.11 系统安装"></a>4.11 系统安装</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-7ae5a0804f62ddc9-20240108011109-5u3wzn6.png">​</p><p>　　点击”Begin Installation”：</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-70dc1c9b9682dde9-20240108011109-wwmadh0.png">​</p><p>　　设置root用户的密码：</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-0259c3cb3f664730-20240108011109-m2wkd47.png">​</p><p>　　设置普通用户的密码：提示密码强度不够，要强制使用需要点击两次”Done”</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-1854743c9e44e5fe-20240108011109-kvirt5a.png">​</p><p>　　然后等待系统安装好即可，出现Reboot按钮就是已经安装好了：</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-5cc3afb39303c1b6-20240108011109-b2kpgxg.png">​</p><p>　　然后点击Reboot按钮进行重启，重启过程不需要任何操作，等待即可。</p><h2 id="5-系统安装后的操作与配置"><a href="#5-系统安装后的操作与配置" class="headerlink" title="5. 系统安装后的操作与配置"></a>5. 系统安装后的操作与配置</h2><h2 id="5-1-登陆查看基本信息"><a href="#5-1-登陆查看基本信息" class="headerlink" title="5.1 登陆查看基本信息"></a>5.1 登陆查看基本信息</h2><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-5234c26636f8bd74-20240108011109-q2jukeo.png">​</p><p>　　登陆界面的信息：</p><ul><li><p>版本信息：Kernel 3.10.0-957.el7.x86_64 on an x86_64</p><ul><li>3：主版本号，有结构性变化时才更改</li><li>10：次版本号，新增功能后发生变化，一般奇数为测试版，偶数为开发版</li><li>0：表示对次版本的修订次数或补丁包数</li><li>957：编译次数，每次编译可对少数程序进行优化或修改</li><li>el7：版本的特殊信息，有较大的随意性，el代表企业版Linux（pp代表测试版Linux，fc代表fedora core，rc代表候选版本）</li><li>x86_64：64位操作系统</li></ul></li><li><p>​<code>[root@node01]#</code>​中的#：超级管理员root输入命令的提示符，在#​号后面可以输入命令来管理系统，例如可以输入以下查看系统信息的命令：</p><pre><code class="shell"># 手动查看系统版本信息# 如果有_64字样，就是64位操作系统# 如果有i386/i686字样，就是32位操作系统[root@node01]# uname -mx86_64[root@node01]# uname -r3.10.0-957.el7.x86_64[root@node01]# uname -aLinux node01 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux# 以下命令如果有结果，就是64位操作系统[root@node01]# ls -d /lib64/lib64</code></pre></li></ul><h2 id="5-2-检查网络配置"><a href="#5-2-检查网络配置" class="headerlink" title="5.2 检查网络配置"></a>5.2 检查网络配置</h2><ul><li>ip address show，简写为ip a：查看IP信息</li></ul><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-4e93b577e09c042f-20240108011109-6du3u4l.png">​</p><ul><li>ip route：查看网关设置<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-dcde563390138a49-20240108011109-d32u7im.png">​</li><li>查看DNS设置：cat &#x2F;etc&#x2F;resolv.conf<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-82c8bee8b2e1c15a-20240108011109-ss1xs4h.png">​</li><li>ping，Ctrl + C 结束ping</li></ul><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-7789414-2305a154a30cee9b-20240108011109-1ejh4sl.png">​</p><ul><li>clear&#x2F;Ctrl + L，清除屏幕内容</li></ul><h2 id="5-3-系统无法联网的故障排除方法"><a href="#5-3-系统无法联网的故障排除方法" class="headerlink" title="5.3 系统无法联网的故障排除方法"></a>5.3 系统无法联网的故障排除方法</h2><ul><li><p>检查IP、子网掩码、网关和DNS是否设置正确<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-dbf9ac920817d55c-20240108011109-gvxt3t4.png">​</p><p>替换此文件中的某一个配置，例如将ONBOOT&#x3D;no改为ONBOOT&#x3D;yes的命令为：</p><pre><code class="shell">sed -i &#39;s#ONBOOT=no#ONBOOT=yes#g&#39; /etc/sysconfig/network-scripts/ifcfg-eth0</code></pre><p>查看某个配置，例如查看ONBOOT配置的值的命令：</p><pre><code class="shell">grep ONBOOT /etc/sysconfig/network-scripts/ifcfg-eth0</code></pre><p>修改之后重启网卡：</p><pre><code class="shell">systemctl restart network</code></pre></li><li><p>查看Windows的VMware NAT服务是否开启<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-9fe57ebf3fbd3e16-20240108011109-xh7tl82.png">​</p></li></ul><h2 id="5-4-使用nmtui命令设置网卡"><a href="#5-4-使用nmtui命令设置网卡" class="headerlink" title="5.4 使用nmtui命令设置网卡"></a>5.4 使用nmtui命令设置网卡</h2><p>　　如果服务器的网络有问题，那么可能需要重新设置网卡信息，可以通过修改<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>​这个文件来修改配置，此处介绍一种使用UI界面设置的方法。</p><ul><li>输入<code>nmtui</code>​命令后回车<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-aa22aae152aeaf34-20240108011109-275jq06.png">​</li><li>nmtui各种界面的操作<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-7077c28289a6503a-20240108011110-kd2m5d1.png">​</li><li>设置好之后依次选择”OK”、”back”、”quit”就可以保存并退到命令行</li></ul><h2 id="5-5-虚拟机保存快照"><a href="#5-5-虚拟机保存快照" class="headerlink" title="5.5 虚拟机保存快照"></a>5.5 虚拟机保存快照</h2><ul><li>先关机：poweroff</li><li>然后创建快照<br>​<img src="http://127.0.0.1:6806/assets/net-img-7789414-c5a5d9278e78cf57-20240108011110-ivlqrpm.png">​</li></ul><p>　　最后编辑于</p><p>　　：2022.06.07 10:42:57</p><p>　　©</p><p>　　著作权归作者所有,转载或内容合作请联系作者</p><p>　　<span style="font-weight: bold;" class="bold">3人点赞</span></p><p>　　<a href="https://www.jianshu.com/nb/20236480">Linux</a></p><p>　　更多精彩内容，就在简书APP</p><p>　　​<img src="http://127.0.0.1:6806/assets/net-img-js-qrc-20240108011110-t380r3b.png">​</p><p>　　“小礼物走一走，来简书关注我”</p><p>　　<span style="font-weight: bold;" class="bold">还没有人赞赏，支持一下</span></p><p>　　​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined"></p><p>　　<a href="https://www.jianshu.com/u/f3baddfa95fc" title="CoderJed">CoderJed</a></p><p>　　总资产137共写了23.4W字获得870个赞共1,244个粉丝</p><ul><li><p><a href="https://www.jianshu.com/p/1003a129be45">人面猴</a></p><p>序言：七十年代末，一起剥皮案震惊了整个滨河市，随后出现的几起案子，更是在滨河造成了极大的恐慌，老刑警刘岩，带你破解…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>129,507<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">1</span>赞<span style="font-weight: bold;" class="bold"> </span>259</p></li><li><p><a href="https://www.jianshu.com/p/1c4506f51019">死咒</a></p><p>序言：滨河连续发生了三起死亡事件，死亡现场离奇诡异，居然都是意外死亡，警方通过查阅死者的电脑和手机，发现死者居然都…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>56,067<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">1</span>赞<span style="font-weight: bold;" class="bold"> </span>223</p></li><li><p><a href="https://www.jianshu.com/p/1ded57e57939">救了他两次的神仙让他今天三更去死</a></p><p>文&#x2F;潘晓璐 我一进店门，熙熙楼的掌柜王于贵愁眉苦脸地迎上来，“玉大人，你说我怎么就摊上这事。” “怎么了？”我有些…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>82,981<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>177</p></li><li><p><a href="https://www.jianshu.com/p/25685c1b1f2b">道士缉凶录：失踪的卖姜人</a></p><p>文&#x2F;不坏的土叔    我叫张陵，是天一观的道长。 经常有香客问我，道长，这世上最难降的妖魔是什么？ 我笑而不…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>38,407<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>138</p></li><li><p><a href="https://www.jianshu.com/p/553802eff5d6">﻿港岛之恋（遗憾婚礼）</a></p><p>正文 为了忘掉前任，我火速办了婚礼，结果婚礼上，老公的妹妹穿的比我还像新娘。我一直安慰自己，他们只是感情好，可当我…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>45,651<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">1</span>赞<span style="font-weight: bold;" class="bold"> </span>226</p></li><li><p><a href="https://www.jianshu.com/p/59985a89b4ef">恶毒庶女顶嫁案：这布局不是一般人想出来的</a></p><p>文&#x2F;花漫 我一把揭开白布。 她就那样静静地躺着，像睡着了一般。 火红的嫁衣衬着肌肤如雪。 梳的纹丝不乱的头发上，一…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>37,303<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">1</span>赞<span style="font-weight: bold;" class="bold"> </span>150</p></li><li><p><a href="https://www.jianshu.com/p/62a01de427e0">城市分裂传说</a></p><p>那天，我揣着相机与录音，去河边找鬼。 笑死，一个胖子当着我的面吹牛，可吹牛的内容都是我干的。 我是一名探鬼主播，决…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>29,022<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">2</span>赞<span style="font-weight: bold;" class="bold"> </span>227</p></li><li><p><a href="https://www.jianshu.com/p/6ccdc163474a">双鸳鸯连环套：你想象不到人心有多黑</a></p><p>文&#x2F;苍兰香墨 我猛地睁开眼，长吁一口气：“原来是场噩梦啊……” “哼！你这毒妇竟也来了？” 一声冷哼从身侧响起，我…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>28,118<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>137</p></li><li><p><a href="https://www.jianshu.com/p/6fe2053108f7">父亲被人害死了，幕后凶手却是我最亲的人！</a></p><p>想象着我的养父在大火中拼命挣扎，窒息，最后皮肤化为焦炭。我心中就已经是抑制不住地欢快，这就叫做以其人之道，还治其人…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>27,547<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">5</span>赞<span style="font-weight: bold;" class="bold"> </span>198</p></li><li><p><a href="https://www.jianshu.com/p/8796e3463067">万荣杀人案实录</a></p><p>序言：老挝万荣一对情侣失踪，失踪者是张志新（化名）和其女友刘颖，没想到半个月后，有当地人在树林里发现了一具尸体，经…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>31,279<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>192</p></li><li><p><a href="https://www.jianshu.com/p/8a691dd8fa34">﻿护林员之死</a></p><p>正文 独居荒郊野岭守林人离奇死亡，尸身上长有42处带血的脓包…… 初始之章·张勋 以下内容为张勋视角 年9月15日…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>28,254<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">2</span>赞<span style="font-weight: bold;" class="bold"> </span>185</p></li><li><p><a href="https://www.jianshu.com/p/a5293fa3b5e0">﻿白月光启示录</a></p><p>正文 我和宋清朗相恋三年，在试婚纱的时候发现自己被绿了。 大学时的朋友给我发了我未婚夫和他白月光在一起吃饭的照片。…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>29,511<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">1</span>赞<span style="font-weight: bold;" class="bold"> </span>197</p></li><li><p><a href="https://www.jianshu.com/p/a68a12246696">惨遭霸总抛弃后，我靠赚来的钱成了富豪榜第一名</a></p><p>白月光回国，霸总把我这个替身辞退。还一脸阴沉的警告我。[不要出现在思思面前， 不然我有一百种方法让你生不如死。]我…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>23,590<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>27</p></li><li><p><a href="https://www.jianshu.com/p/a83aa7e71001">活死人</a></p><p>序言：一个原本活蹦乱跳的男人离奇死亡，死状恐怖，灵堂内的尸体忽然破棺而出，到底是诈尸还是另有隐情，我是刑警宁泽，带…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>26,232<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">2</span>赞<span style="font-weight: bold;" class="bold"> </span>181</p></li><li><p><a href="https://www.jianshu.com/p/bee7d9c3fcf9">﻿日本核电站爆炸内幕</a></p><p>正文 年R本政府宣布，位于F岛的核电站，受9级特大地震影响，放射性物质发生泄漏。R本人自食恶果不足惜，却给世界环境…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>30,305<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">3</span>赞<span style="font-weight: bold;" class="bold"> </span>184</p></li><li><p><a href="https://www.jianshu.com/p/c2cfc4cb0aa7">男人毒药：我在死后第九天来索命</a></p><p>文&#x2F;蒙蒙 一、第九天 我趴在偏房一处隐蔽的房顶上张望。 院中可真热闹，春花似锦、人声如沸。这庄子的主人今日做“春日…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>24,943<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>6</p></li><li><p><a href="https://www.jianshu.com/p/c329b54bd638">一桩弑父案，背后竟有这般阴谋</a></p><p>文&#x2F;苍兰香墨 我抬头看了看天上的太阳。三九已至，却和暖如春，着一层夹袄步出监牢的瞬间，已是汗流浃背。 一阵脚步声响…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>25,023<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>132</p></li><li><p><a href="https://www.jianshu.com/p/d79d2f48417f">情欲美人皮</a></p><p>我被黑心中介骗来泰国打工， 没想到刚下飞机就差点儿被人妖公主榨干…… 1. 我叫王不留，地道东北人。 一个月前我还…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>31,877<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">2</span>赞<span style="font-weight: bold;" class="bold"> </span>202</p></li><li><p><a href="https://www.jianshu.com/p/fc890ed5083c">代替公主和亲</a></p><p>正文 我出身青楼，却偏偏与公主长得像，于是被迫代替她去往敌国和亲。 传闻我的和亲对象是个残疾皇子，可洞房花烛夜当晚…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>32,090<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">2</span>赞<span style="font-weight: bold;" class="bold"> </span>202</p></li></ul><h3 id="推荐阅读更多精彩内容"><a href="#推荐阅读更多精彩内容" class="headerlink" title="推荐阅读更多精彩内容"></a>推荐阅读<a href="https://www.jianshu.com/">更多精彩内容</a></h3><ul><li><p><a href="https://www.jianshu.com/p/e7e59aa717f8">linux磁盘分区以及系统目录结构介绍</a></p><p>大家好，我是可爱的帅气迷人的猪猪，硬盘如果想存放数据要经历以如下过程先分区—-》格式化（创建文件系统）—》…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>3,951<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>1</p></li><li><p><a href="https://www.jianshu.com/p/171a3f385b38">网络操作系统复习资料</a></p><p>1、第八章 Samba服务器2、第八章 NFS服务器3、第十章 Linux下DNS服务器配站点，域名解析概念命令：…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>3,602<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>10</p></li><li><p><a href="https://www.jianshu.com/p/73f3de2085ce">Linux系统结构</a></p><p>Linux系统一般有4个主要部分： 内核、shell、文件系统和应用程序。内核、shell和文件系统一起形成了基本…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>3,150<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">1</span>赞<span style="font-weight: bold;" class="bold"> </span>17</p></li><li><p><a href="https://www.jianshu.com/p/b23821728aa0">linux系统结构详解（转载）</a></p><p>Linux系统一般有4个主要部分：内核、shell、文件系统和应用程序。 内核、shell和文件系统一起形成了基本…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>2,490<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>22</p></li><li><p><a href="https://www.jianshu.com/p/9c5c708d2a5e">日常</a></p><p>今天比较尴尬的是收到快递才发现自己竟然拍了相同的两件，马上联系卖家，一早上都在忙快递的问题，哎，终于在吃饭之前解决…</p><p>​<img src="/2024/01/07/001-enterprise-centos-76-operating-system-installation-z2mkm7v/undefined">阅读<span style="font-weight: bold;" class="bold"> </span>172<span style="font-weight: bold;" class="bold">评论</span> <span style="font-weight: bold;" class="bold">0</span>赞<span style="font-weight: bold;" class="bold"> </span>0</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-准备系统镜像&quot;&gt;&lt;a href=&quot;#1-准备系统镜像&quot; class=&quot;headerlink&quot; title=&quot;1. 准备系统镜像&quot;&gt;&lt;/a&gt;1. 准备系统镜像&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://wiki.centos.org/Do</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SkyWalking8.7.0源码环境搭建</title>
    <link href="https://blog.jiang4yu.com/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.jiang4yu.com/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-05-01T03:41:08.000Z</published>
    <updated>2024-03-30T06:44:25.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载源码并导入-IDEA-中"><a href="#1-下载源码并导入-IDEA-中" class="headerlink" title="1. 下载源码并导入 IDEA 中"></a>1. 下载源码并导入 IDEA 中</h2><ol><li><p>从官网下载 <a href="https://archive.apache.org/dist/skywalking/8.7.0/apache-skywalking-apm-8.7.0-src.tgz">源码</a></p></li><li><p>解压下载的源码到文件夹，效果如下图所示<br> <img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220106153407-ioefvta.png" alt="image.png" title="源码解压后目录效果"></p></li><li><p>导入 IDEA 中，第一次导入会比较慢，因为需要下载各种依赖和插件，导入后效果如下：<br> <img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107160352-xvyxupj.png" alt="image.png" title="导入后效果图"></p></li></ol><h2 id="2-编译之前的修改"><a href="#2-编译之前的修改" class="headerlink" title="2. 编译之前的修改"></a>2. 编译之前的修改</h2><h3 id="1、去除-maven-checkstyle-plugin-插件，"><a href="#1、去除-maven-checkstyle-plugin-插件，" class="headerlink" title="1、去除 maven-checkstyle-plugin 插件，"></a>1、去除 maven-checkstyle-plugin 插件，</h3><p>　　该插件是用来规范代码风格的，防止误报错去除</p><h3 id="2、修改-apm-webapp-的-pom-xml-文件"><a href="#2、修改-apm-webapp-的-pom-xml-文件" class="headerlink" title="2、修改 apm-webapp 的 pom.xml 文件"></a>2、修改 apm-webapp 的 pom.xml 文件</h3><p>　　apm-webapp 是 SkyWalking 的前端项目，负责编译前端工程 skywalking-ui；它会下载最新的 node 环境，在编译时容易卡住。</p><p>　　<strong>解决方案 1</strong></p><p>　　注释这一部分的插件：frontend-maven-plugin，不进行前端模块的编译；</p><p>　　<strong>解决方案 2</strong></p><p>　　修改插件中的下载镜像地址：</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107174003-1imrxem.png" alt="image.png"></p><p>　　将镜像地址，改为国内的解析地址 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p><p>　　<strong>注意：此处选择第一个解决办法，因为本机已经安装过了 node 环境，需要使用前端时可以单独编译。</strong></p><h2 id="3-Node-js-环境搭建"><a href="#3-Node-js-环境搭建" class="headerlink" title="3. Node.js 环境搭建"></a>3. Node.js 环境搭建</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ol><li><p>到 NodeJs <a href="https://nodejs.org/zh-cn/download/">中文官网</a>,选择系统对应的长期维护版本下载，即可；<br> 本文，下载的是 <a href="https://nodejs.org/dist/v16.13.1/node-v16.13.1-win-x64.zip">node-v16.13.1-win-x64.zip</a><br> <img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107142818-z3f3wms.png" alt="image.png"></p></li><li><p>解压下载的软件包到文件夹，效果如下图所示<br> <img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107143336-xy4l8eq.png" alt="image.png"></p></li><li><p>在解压后的目录中，新建下列两个目录</p><ul><li>node_global</li><li>node_cache</li></ul><p> 注意 1：node_global 为 npm 全局安装位置；node_cache 为 npm 缓存路径<br> 注意 2：本文件解压到 D:\Program Files\node-v16.13.1-win-x64 后面都以此为例，实际开发中请修改成自己的解压目录<br> 注意 3：整体目录如下<br> <img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107144655-dtm6edr.png" alt="image.png"></p></li></ol><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>　　新增环境变量名为：NODE_HOME 变量值为：D:\Program Files\node-v16.13.1-win-x64 的环境变量；</p><p>　　修改 PATH，并添加 %NODE_HOME% 和 %NODE_HOME%\node_global</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107145053-d87ojhp.png" alt="image.png"></p><p>　　注意 1：查看环境变量，在命令行下使用下列命令检查</p><ul><li>echo %node_home%</li><li>echo %path%</li></ul><p>　　注意 2：测试安装是否成功：打开 cmd 窗口，输出如下命令会输出 NodeJs 和 npm 的版本号</p><ul><li>node -v</li><li>npm -v</li></ul><h3 id="配置-npm-全局模块路径和-cache-默认安装位置"><a href="#配置-npm-全局模块路径和-cache-默认安装位置" class="headerlink" title="配置 npm 全局模块路径和 cache 默认安装位置"></a>配置 npm 全局模块路径和 cache 默认安装位置</h3><p>　　打开 cmd，分开执行如下命令：</p><ul><li>npm config set prefix “D:\Program Files\node-v16.13.1-win-x64\node_global”</li><li>npm config set cache “D:\Program Files\node-v16.13.1-win-x64\node_cache”</li></ul><p>　　注意 1：将步骤一创建的 node_global(npm 全局安装位置)和 node_cache(npm 缓存路径)与 npm 联系起来</p><p>　　注意 2：如果执行命令卡死，可以删除 C:\Users\用户名.npmrc 后重新执行。（用户名：为当前电脑的用户名）</p><p>　　注意 3：命令中的双引号，不能少</p><h3 id="修改-npm-镜像源，提高下载速度"><a href="#修改-npm-镜像源，提高下载速度" class="headerlink" title="修改 npm 镜像源，提高下载速度"></a>修改 npm 镜像源，提高下载速度</h3><p>　　打开 cmd，分开执行如下命令：</p><ul><li>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></li></ul><p>　　注意 1：查看源命令为：npm config get registry</p><p>　　注意 2：如果要恢复成原来的源，命令为：npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p><h2 id="4-Protocol-buffers-工具环境搭建"><a href="#4-Protocol-buffers-工具环境搭建" class="headerlink" title="4. Protocol buffers 工具环境搭建"></a>4. Protocol buffers 工具环境搭建</h2><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><p>　　到 <a href="https://github.com/protocolbuffers/protobuf/releases">工具官网</a> 下载,对应系统版本的工具包，本文下载的为 <a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.2/protoc-3.19.2-win64.zip">protoc-3.19.2-win64.zip</a></p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107152101-55c5ar3.png" alt="image.png"></p><h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>　　将下载好的软件包解压到文件夹，效果如下图所示</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107152446-167oqg2.png" alt="image.png"></p><p>　　新增环境变量名为：PROTOC_HOME 变量值为：D:\Program Files\protoc-3.19.2-win64 的环境变量；</p><p>　　修改 PATH，并添加 %PROTOC_HOME%\bin</p><p>　　注意 1：打开 cmd，运行下面的命令，编译运行版本已经被正确配置</p><ul><li>protoc –version</li></ul><h2 id="5-编译项目进行打包"><a href="#5-编译项目进行打包" class="headerlink" title="5. 编译项目进行打包"></a>5. 编译项目进行打包</h2><h3 id="5-1-编译-skywalking-ui-前端代码"><a href="#5-1-编译-skywalking-ui-前端代码" class="headerlink" title="5.1. 编译 skywalking-ui 前端代码"></a>5.1. 编译 skywalking-ui 前端代码</h3><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107154735-97bgx9n.png" alt="image.png"></p><p>　　使用 IDEA 的命令行进入 skywalking-ui 目录,依次执行如下命令进行，skywalking-ui 的编译</p><ul><li>npm install</li><li>npm run build</li></ul><p>　　编译完成后，将会在 skywalking-ui 目录下生成如下图所示文件</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107172504-0xloomt.png" alt="image.png"></p><h3 id="5-2-编译-apm-protocol-协议项目代码"><a href="#5-2-编译-apm-protocol-协议项目代码" class="headerlink" title="5.2. 编译 apm-protocol 协议项目代码"></a>5.2. 编译 apm-protocol 协议项目代码</h3><ol><li>方式 1：命令行方式</li></ol><p>　　使用 IDEA 的命令行进入 apm-protocol 目录,依次执行如下命令进行 apm-protocol 的编译</p><ul><li>cd apm-protocol</li><li>mvn install  ‘-Dmaven.test.skip&#x3D;true’</li></ul><ol start="2"><li>方式 2：图形界面方式</li></ol><p>　　利用 IDEA 自带的 maven 图形界面方式进行编译</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107174520-xfpstv9.png" alt="image.png"></p><p>　　编译结束后，apm-protocol 目录下的 apm-network 将会又如下效果的目录：</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107174802-4i3w08h.png" alt="image.png"></p><h3 id="5-3-编译打包-apm-webapp"><a href="#5-3-编译打包-apm-webapp" class="headerlink" title="5.3. 编译打包 apm-webapp"></a>5.3. 编译打包 apm-webapp</h3><ol><li>方式 1：命令行方式</li></ol><p>　　使用 IDEA 的命令行进入 apm-webapp 目录,依次执行如下命令进行 apm-webapp 的编译</p><ul><li>cd apm-webapp</li><li>mvn clean compile package ‘-Dmaven.test.skip&#x3D;true’</li></ul><ol start="2"><li>方式 2：图形界面方式</li></ol><p>　　利用 IDEA 自带的 maven 图形界面方式进行编译</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107175044-7k0ohrv.png" alt="image.png"></p><p>　　编译后 apm-webapp 目录下将会呈现效果如下的目录：</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107175141-73oj2yd.png" alt="image.png"></p><h2 id="6-整体编译打包"><a href="#6-整体编译打包" class="headerlink" title="6. 整体编译打包"></a>6. 整体编译打包</h2><ol><li>方式 1：命令行方式</li></ol><p>　　使用 IDEA 的命令行进入 apache-skywalking-apm-8.7.0 目录,依次执行如下命令进行 apache-skywalking-apm-8.7.0 的编译</p><ul><li>cd apache-skywalking-apm-8.7.0</li><li>mvn clean compile pacakge ‘-Dmaven.test.skip&#x3D;true’</li></ul><ol start="2"><li>方式 2：图形界面方式</li></ol><p>　　利用 IDEA 自带的 maven 图形界面方式进行编译</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107180315-oo0fnl3.png" alt="image.png"></p><p>　　编译完成后，可以在根目录下，看到一个 dist 目录，目录中的即为打包后的，可执行文件</p><p>　　<img src="/2022/05/01/SkyWalking8.7.0%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220107184555-meoihz9.png" alt="image.png"></p><p>　　分别为 es7 版本和 es6 版本的可执行包，根据实际需要提供软件包即可</p><p>　　</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-下载源码并导入-IDEA-中&quot;&gt;&lt;a href=&quot;#1-下载源码并导入-IDEA-中&quot; class=&quot;headerlink&quot; title=&quot;1. 下载源码并导入 IDEA 中&quot;&gt;&lt;/a&gt;1. 下载源码并导入 IDEA 中&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从官网</summary>
      
    
    
    
    <category term="SkyWalking" scheme="https://blog.jiang4yu.com/categories/SkyWalking/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7 非docker部署 Yapi</title>
    <link href="https://blog.jiang4yu.com/2020/07/05/CentOS7-%E9%9D%9Edocker%E9%83%A8%E7%BD%B2-Yapi/"/>
    <id>https://blog.jiang4yu.com/2020/07/05/CentOS7-%E9%9D%9Edocker%E9%83%A8%E7%BD%B2-Yapi/</id>
    <published>2020-07-05T04:08:56.000Z</published>
    <updated>2024-03-30T06:44:25.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装NodeJs"><a href="#1-安装NodeJs" class="headerlink" title="1 安装NodeJs"></a>1 安装NodeJs</h2><pre><code class="bash"># 安装依赖yum install -y wget vim# 下载nodejswget https://nodejs.org/dist/v12.18.0/node-v12.18.0-linux-x64.tar.xz# 解压xz -d node-v12.18.0-linux-x64.tar.xztar -xf node-v12.18.0-linux-x64.tarmv node-v12.18.0-linux-x64 /usr/local/node-v12.18.0</code></pre><h3 id="1-1-配置环境变量"><a href="#1-1-配置环境变量" class="headerlink" title="1.1 配置环境变量"></a>1.1 配置环境变量</h3><pre><code class="bash">vim /etc/profile# 在文件末尾，添加如下内容：export NODE_HOME=/usr/local/node-v12.18.0export PATH=$PATH:$NODE_HOME/binexport NODE_PATH=$PATH:$NODE_HOME/lib/node_modules# 加载环境source /etc/profile# 检查是否安装成功node -vnpm -vecho $NODE_HOME</code></pre><h2 id="2-安装mongodb"><a href="#2-安装mongodb" class="headerlink" title="2 安装mongodb"></a>2 安装mongodb</h2><h3 id="2-1-创建-yum源"><a href="#2-1-创建-yum源" class="headerlink" title="2.1 创建 yum源"></a>2.1 创建 yum源</h3><pre><code class="bash">vim /etc/yum.repos.d/mongodb-org-4.0.repo# 内容如下：[mongodb-org-4.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</code></pre><h3 id="2-2-使用-yum-安装-mongoDB"><a href="#2-2-使用-yum-安装-mongoDB" class="headerlink" title="2.2 使用 yum 安装 mongoDB"></a>2.2 使用 yum 安装 mongoDB</h3><pre><code class="bash"># 安装yum install -y mongodb-org# 验证安装结果rpm -qa |grep mongodbrpm -ql mongodb-org-server</code></pre><h3 id="2-3-启动mongoDB"><a href="#2-3-启动mongoDB" class="headerlink" title="2.3 启动mongoDB"></a>2.3 启动mongoDB</h3><pre><code class="bash"># 启动systemctl start mongod.service# 加载开机自启动systemctl enable mongod.service# 查看状态systemctl status mongod.service# 查看端口暂用netstat -natp | grep 27017# 查看数据库的进程是否存在ps -aux | grep mongod</code></pre><h3 id="2-4-配置远程连接"><a href="#2-4-配置远程连接" class="headerlink" title="2.4 配置远程连接"></a>2.4 配置远程连接</h3><pre><code class="bash"># 编辑vim /etc/mongod.conf# 将 net：#port:27017#bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.# 改为如下内容：net:  port: 27017  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.    # 重启mongodb服务systemctl restart mongod.service</code></pre><h2 id="3-Yapi-安装"><a href="#3-Yapi-安装" class="headerlink" title="3 Yapi 安装"></a>3 Yapi 安装</h2><h3 id="3-1-安装Yapi"><a href="#3-1-安装Yapi" class="headerlink" title="3.1 安装Yapi"></a>3.1 安装Yapi</h3><pre><code class="bash"># 安装npm install -g yapi-cli --registry https://registry.npm.taobao.orgyapi server# 打开浏览器配置</code></pre><h3 id="3-2-安装PM2"><a href="#3-2-安装PM2" class="headerlink" title="3.2 安装PM2"></a>3.2 安装PM2</h3><pre><code class="bash">npm install -g pm2</code></pre><h3 id="3-3-开机启动"><a href="#3-3-开机启动" class="headerlink" title="3.3 开机启动"></a>3.3 开机启动</h3><pre><code class="bash"># 启动服务pm2 start /usr/local/yapi/vendors/server/app.js# 保存当前进程状态pm2 save# 生成开机自启动服务pm2 startup# 查看启动项systemctl list-unit-files | grep enable</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装NodeJs&quot;&gt;&lt;a href=&quot;#1-安装NodeJs&quot; class=&quot;headerlink&quot; title=&quot;1 安装NodeJs&quot;&gt;&lt;/a&gt;1 安装NodeJs&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# 安装依赖
yum instal</summary>
      
    
    
    
    <category term="DevOps" scheme="https://blog.jiang4yu.com/categories/DevOps/"/>
    
    
    <category term="CentOS7" scheme="https://blog.jiang4yu.com/tags/CentOS7/"/>
    
    <category term="Yapi" scheme="https://blog.jiang4yu.com/tags/Yapi/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 非docker安装 SonarQube8.3.1</title>
    <link href="https://blog.jiang4yu.com/2020/07/05/CentOS7-%E9%9D%9Edocker%E5%AE%89%E8%A3%85-SonarQube8-3-1/"/>
    <id>https://blog.jiang4yu.com/2020/07/05/CentOS7-%E9%9D%9Edocker%E5%AE%89%E8%A3%85-SonarQube8-3-1/</id>
    <published>2020-07-05T03:59:51.000Z</published>
    <updated>2024-03-30T06:44:25.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1 安装依赖"></a>1 安装依赖</h2><pre><code class="bash">yum install -y epel-release unzip vim wget</code></pre><h2 id="2-安装-OpenJDK"><a href="#2-安装-OpenJDK" class="headerlink" title="2 安装 OpenJDK"></a>2 安装 OpenJDK</h2><pre><code class="bash"># 安装jdkyum install -y java-11-openjdk java-11-openjdk-devel# 查看jdk具体版本ls -lh /usr/lib/jvm/</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code class="bash">vim /etc/profile</code></pre><p>在文件最后添加如下内容：</p><pre><code class="text">export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.7.10-4.el7_8.x86_64#&#123;查看得知得版本&#125;export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin</code></pre><pre><code class="bash">source /etc/profile</code></pre><h2 id="3-安装并配置-PostgreSQL"><a href="#3-安装并配置-PostgreSQL" class="headerlink" title="3 安装并配置 PostgreSQL"></a>3 安装并配置 PostgreSQL</h2><h3 id="3-1-安装-PostgreSQL-10"><a href="#3-1-安装-PostgreSQL-10" class="headerlink" title="3.1 安装 PostgreSQL 10"></a>3.1 安装 PostgreSQL 10</h3><pre><code class="bash"># 添加 PostgreSQL 10 yum源yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm# 安装 PostgreSQL 10 服务yum install -y postgresql10-server postgresql10# 初始化数据库/usr/pgsql-10/bin/postgresql-10-setup initdb</code></pre><h3 id="3-2-编辑-pg-hba-conf"><a href="#3-2-编辑-pg-hba-conf" class="headerlink" title="3.2 编辑 pg_hba.conf"></a>3.2 编辑 pg_hba.conf</h3><pre><code class="bash">vim /var/lib/pgsql/10/data/pg_hba.conf</code></pre><p>内容如下：</p><pre><code class="bash"># 将host        all        all        127.0.0.1/32        ident 改为：host        all        all        127.0.0.1/32        md5# 在文档后添加 下面一行开启远程连接host        all        all        0.0.0.0/0        md5</code></pre><h3 id="3-3-编辑-postgresql-conf"><a href="#3-3-编辑-postgresql-conf" class="headerlink" title="3.3 编辑 postgresql.conf"></a>3.3 编辑 postgresql.conf</h3><pre><code class="bash">vim /var/lib/pgsql/10/data/postgresql.conf# 开启远程监听 listen_addresses = &#39;localhost&#39; 改为如下内容listen_addresses = &#39;*&#39;port = 5432</code></pre><h3 id="3-4-启动-PostgreSQL-服务"><a href="#3-4-启动-PostgreSQL-服务" class="headerlink" title="3.4 启动 PostgreSQL 服务"></a>3.4 启动 PostgreSQL 服务</h3><pre><code class="bash"># 启动systemctl start postgresql-10# 加载开机自启systemctl enable postgresql-10# 查看状态systemctl status postgresql-10# 查看端口监听netstat -tulpn | grep 5432</code></pre><h3 id="3-5-sonarqube-数据库"><a href="#3-5-sonarqube-数据库" class="headerlink" title="3.5 sonarqube 数据库"></a>3.5 sonarqube 数据库</h3><p>为 SonarQube 创建 一个名为sonar的数据库和名为sonar，密码为sonar的管理员</p><pre><code class="bash">sudo -u postgres psql;# 创建数据库CREATE DATABASE sonar;# 创建管理员CREATE USER sonar WITH ENCRYPTED PASSWORD &#39;sonar&#39;;# 将数据库 sonar 授权给 sonar 进行管理GRANT ALL PRIVILEGES ON DATABASE sonar TO sonar;# 更改 sonar 的所有权ALTER DATABASE sonar OWNER TO sonar;\q</code></pre><h2 id="4-安装并配置SonarQube"><a href="#4-安装并配置SonarQube" class="headerlink" title="4 安装并配置SonarQube"></a>4 安装并配置SonarQube</h2><h3 id="4-1-安装-SonarQube"><a href="#4-1-安装-SonarQube" class="headerlink" title="4.1 安装 SonarQube"></a>4.1 安装 SonarQube</h3><pre><code class="bash">wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.3.1.34397.zipunzip sonarqube-8.3.1.34397.zipmv sonarqube-8.3.1.34397 /usr/local/sonarqube-8.3.1</code></pre><h3 id="4-2-编辑-sonar-properties"><a href="#4-2-编辑-sonar-properties" class="headerlink" title="4.2 编辑 sonar.properties"></a>4.2 编辑 sonar.properties</h3><pre><code class="bash">vim /usr/local/sonarqube-8.3.1/conf/sonar.properties</code></pre><p>内容如下：</p><pre><code class="bash"># 数据库（必需）sonar.jdbc.username=sonarsonar.jdbc.password=sonarsonar.jdbc.url=jdbc:postgresql://localhost/sonarsonar.jdbc.maxActive=60sonar.jdbc.maxIdle=5sonar.jdbc.minIdle=2sonar.jdbc.maxWait=5000sonar.jdbc.minEvictableIdleTimeMillis=600000sonar.jdbc.timeBetweenEvictionRunsMillis=30000sonar.jdbc.removeAbandoned=truesonar.jdbc.removeAbandonedTimeout=60# 网页服务（可选）sonar.web.host=127.0.0.1sonar.web.port=9000sonar.web.javaOpts=-server -Xms512m -Xmx512m -XX:+HeapDumpOnOutOfMemoryErrorsonar.search.javaOpts=-server -Xms512m -Xmx512m -XX:+HeapDumpOnOutOfMemoryErrorsonar.ce.javaOpts=-server -Xms512m -Xmx512m -XX:+HeapDumpOnOutOfMemoryError# LDAP（可选）sonar.security.realm=LDAPsonar.security.savePassword=truesonar.authenticator.downcase = trueldap.url=ldap://&lt;ldap-server&gt;.zone24x7.lk:389ldap.bindDn=&lt;ldap-user&gt;@zone24x7.lkldap.bindPassword=&lt;ldap-password&gt;ldap.user.baseDn=dc=zone24x7,dc=lkldap.user.request=(&amp;(objectClass=User)(sAMAccountName=&#123;login&#125;))ldap.user.realNameAttribute=cnldap.user.emailAttribute=mail</code></pre><h2 id="5-安装并配置-sonar-scanner"><a href="#5-安装并配置-sonar-scanner" class="headerlink" title="5 安装并配置 sonar-scanner"></a>5 安装并配置 sonar-scanner</h2><h3 id="5-1-安装-sonar-scanner"><a href="#5-1-安装-sonar-scanner" class="headerlink" title="5.1 安装 sonar-scanner"></a>5.1 安装 sonar-scanner</h3><pre><code class="bash">wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.3.0.2102-linux.zipunzip sonar-scanner-cli-4.3.0.2102-linux.zipmv sonar-scanner-4.3.0.2102-linux/ /usr/local/sonar-scanner-4.3.0</code></pre><h3 id="5-2-配置-sonar-scanner"><a href="#5-2-配置-sonar-scanner" class="headerlink" title="5.2 配置 sonar-scanner"></a>5.2 配置 sonar-scanner</h3><pre><code class="bash">vim /usr/local/sonar-scanner-4.3.0/conf/sonar-scanner.properties</code></pre><p>内容如下：</p><pre><code class="bash">sonar.host.url=http://localhost:9000sonar.sourceEncoding=UTF-8</code></pre><h2 id="6-配置-sonar-账号"><a href="#6-配置-sonar-账号" class="headerlink" title="6 配置 sonar 账号"></a>6 配置 sonar 账号</h2><pre><code class="bash">useradd --system --no-create-home sonarchown -R sonar:sonar /usr/local/sonarqube-8.3.1chown -R sonar:sonar /usr/local/sonar-scanner-4.3.0</code></pre><h1 id="7-创建sonar-service管理-sonar"><a href="#7-创建sonar-service管理-sonar" class="headerlink" title="7 创建sonar.service管理 sonar"></a>7 创建sonar.service管理 sonar</h1><pre><code class="bash">vim /etc/systemd/system/sonar.service</code></pre><p>内容如下：</p><pre><code class="bash">[Unit]Description=SonarQube ServerAfter=syslog.target network.target[Service]Type=forkingExecStart=/usr/local/sonarqube-8.3.1/bin/linux-x86-64/sonar.sh startExecStop=/usr/local/sonarqube-8.3.1/bin/linux-x86-64/sonar.sh stopLimitNOFILE=65536LimitNPROC=4096User=sonarGroup=sonarRestart=on-failure[Install]WantedBy=multi-user.target</code></pre><h3 id="8-修改-sysctl-conf"><a href="#8-修改-sysctl-conf" class="headerlink" title="8 修改 sysctl.conf"></a>8 修改 sysctl.conf</h3><pre><code class="bash"># 查找 xx-sysctl.conf,结果一般为：00-sysctl.conf或者99-sysctl.conf等ls /etc/sysctl.d/# 修改 xx-sysctl.confvim /etc/sysctl.d/xx-sysctl.conf# 在文后添加如下一行：vm.max_map_count = 262144# 加载改动sudo sysctl -p /etc/sysctl.d/xx-sysctl.conf</code></pre><h2 id="9-启动-SonarQube-服务"><a href="#9-启动-SonarQube-服务" class="headerlink" title="9 启动 SonarQube 服务"></a>9 启动 SonarQube 服务</h2><pre><code class="bash"># 加载服务sudo systemctl daemon-reload# 启动服务sudo systemctl start sonar.service# 开机自启sudo systemctl enable sonar.service# 查看服务状态sudo systemctl status sonar.service# 检查端口占用netstat -tulpn | grep 9000</code></pre><h2 id="10-登录并安装汉化插件"><a href="#10-登录并安装汉化插件" class="headerlink" title="10 登录并安装汉化插件"></a>10 登录并安装汉化插件</h2><p>默认用户以及密码：admin&#x2F;admin</p><p><img src="/2020/07/05/CentOS7-%E9%9D%9Edocker%E5%AE%89%E8%A3%85-SonarQube8-3-1/image-20200609100020148.png" alt="image-20200609100020148"></p><p><img src="/2020/07/05/CentOS7-%E9%9D%9Edocker%E5%AE%89%E8%A3%85-SonarQube8-3-1/image-20200609100241703.png" alt="image-20200609100241703"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装依赖&quot;&gt;&lt;a href=&quot;#1-安装依赖&quot; class=&quot;headerlink&quot; title=&quot;1 安装依赖&quot;&gt;&lt;/a&gt;1 安装依赖&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum install -y epel-release unzip</summary>
      
    
    
    
    <category term="DevOps" scheme="https://blog.jiang4yu.com/categories/DevOps/"/>
    
    
    <category term="CentOS7" scheme="https://blog.jiang4yu.com/tags/CentOS7/"/>
    
    <category term="SonarQube" scheme="https://blog.jiang4yu.com/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下安装与配置OpenLDAP</title>
    <link href="https://blog.jiang4yu.com/2020/07/05/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEOpenLDAP/"/>
    <id>https://blog.jiang4yu.com/2020/07/05/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEOpenLDAP/</id>
    <published>2020-07-05T03:48:05.000Z</published>
    <updated>2024-03-30T06:44:25.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、安装OpenLDAP"><a href="#1、安装OpenLDAP" class="headerlink" title="1、安装OpenLDAP"></a>1、安装OpenLDAP</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="bash">yum install -y openldap openldap-servers openldap-clients</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code class="bash">sudo systemctl start slapdsudo systemctl enable slapdsudo systemctl status slapd</code></pre><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><pre><code class="bash">firewall-cmd --add-service=ldap</code></pre><h2 id="2、配置-LDAP-服务"><a href="#2、配置-LDAP-服务" class="headerlink" title="2、配置 LDAP 服务"></a>2、配置 LDAP 服务</h2><ol><li>创建OpenLDAP管理员，注意记录哈希值</li></ol><pre><code class="bash">slappasswd</code></pre><p><img src="/2020/07/05/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEOpenLDAP/01.png"></p><ol start="2"><li>创建一个<strong>LDIF</strong>文件 （<strong>ldaprootpasswd.ldif</strong>）， 用于向 LDAP 目录添加条目</li></ol><pre><code class="bash">vim ldaprootpasswd.ldif</code></pre><p>在下面添加如下内容：</p><p><strong>注意：将PASSWORD替换为前面获取的哈希值</strong></p><pre><code class="text">dn: olcDatabase=&#123;0&#125;config,cn=configchangetype: modifyadd: olcRootPWolcRootPW: &#123;SSHA&#125;PASSWORD</code></pre><p>内容解释：</p><ul><li><strong>olcDatabase</strong>：指示特定的数据库实例名称，通常可以在**&#x2F;etc&#x2F;openldap&#x2F;slapd.d&#x2F;cn_config**中找到</li><li>cn&#x3D;config： 表示全局配置选项</li><li>olcRootPW：是创建管理用户时获取的哈希字符串</li></ul><ol start="3"><li>通过指定引用 ldap 服务器和上述文件的 URI 来添加相应的 LDAP 条目</li></ol><pre><code class="bash">sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ldaprootpasswd.ldif  </code></pre><h2 id="3、配置LDAP数据库"><a href="#3、配置LDAP数据库" class="headerlink" title="3、配置LDAP数据库"></a>3、配置LDAP数据库</h2><ol><li><p>将LDAP提供的示例数据库配置文件复制到 <strong>&#x2F;var&#x2F;lib&#x2F;ldap</strong>目录中，并把该文件授权给ldap:ldap</p><p>注意：ldap:ldap LDAP服务会自动创建</p></li></ol><pre><code class="bash">sudo cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIGsudo chown -R ldap:ldap /var/lib/ldap/DB_CONFIGsudo systemctl restart slapd</code></pre><ol start="2"><li>从&#x2F;etc&#x2F;openldap&#x2F;架构目录中导入一些基本的 LDAP 架构，如下所示：</li></ol><pre><code class="bash">sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldifsudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldifsudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif</code></pre><ol start="3"><li>在添加具体的域文件，并创建为<strong>ldapdomain.ldif</strong>的文件</li></ol><pre><code class="bash">sudo vim ldapdomain.ldif</code></pre><p>内容如下，注意讲example 替换为自己的域名，将PASSWORD替换为前面获取的哈希值</p><pre><code class="bash">dn: olcDatabase=&#123;1&#125;monitor,cn=configchangetype: modifyreplace: olcAccessolcAccess: &#123;0&#125;to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot;  read by dn.base=&quot;cn=Manager,dc=example,dc=com&quot; read by * nonedn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyreplace: olcSuffixolcSuffix: dc=example,dc=comdn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyreplace: olcRootDNolcRootDN: cn=Manager,dc=example,dc=comdn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyadd: olcRootPWolcRootPW: &#123;SSHA&#125;PASSWORDdn: olcDatabase=&#123;2&#125;hdb,cn=configchangetype: modifyadd: olcAccessolcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by  dn=&quot;cn=Manager,dc=example,dc=com&quot; write by anonymous auth by self write by * noneolcAccess: &#123;1&#125;to dn.base=&quot;&quot; by * readolcAccess: &#123;2&#125;to * by dn=&quot;cn=Manager,dc=example,dc=com&quot; write by * read</code></pre><ol start="4"><li>通过指定引用 ldap 服务器和上述文件的 URI 来添加相应的 LDAP 条目</li></ol><pre><code class="bash">sudo ldapmodify -Y EXTERNAL -H ldapi:/// -f ldapdomain.ldif</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、安装OpenLDAP&quot;&gt;&lt;a href=&quot;#1、安装OpenLDAP&quot; class=&quot;headerlink&quot; title=&quot;1、安装OpenLDAP&quot;&gt;&lt;/a&gt;1、安装OpenLDAP&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;</summary>
      
    
    
    
    <category term="DevOps" scheme="https://blog.jiang4yu.com/categories/DevOps/"/>
    
    
    <category term="CentOS7" scheme="https://blog.jiang4yu.com/tags/CentOS7/"/>
    
    <category term="OpenLDAP" scheme="https://blog.jiang4yu.com/tags/OpenLDAP/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ系列：1.CentOS7安装单机版RocketMQ</title>
    <link href="https://blog.jiang4yu.com/2020/06/19/RocketMQ%E7%B3%BB%E5%88%97%EF%BC%9A1-CentOS7%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88RocketMQ/"/>
    <id>https://blog.jiang4yu.com/2020/06/19/RocketMQ%E7%B3%BB%E5%88%97%EF%BC%9A1-CentOS7%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88RocketMQ/</id>
    <published>2020-06-19T16:29:36.000Z</published>
    <updated>2024-03-30T06:44:25.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、安装JDK"><a href="#1、安装JDK" class="headerlink" title="1、安装JDK"></a>1、安装JDK</h2><p>Oracle官网下载jdk，并上传到&#x2F;usr&#x2F;local&#x2F;目录下，本文采用的为：jdk-8u192-linux-x64.tar.gz</p><pre><code class="bash"># 解压tar zxvf jdk-8u192-linux-x64.tar.gz# 配置环境变量vim /etc/profileexport JAVA_HOME=/usr/local/jdk1.8.0_192export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin# 重新加载环境变量source /etc/profile# 测试java -version</code></pre><h2 id="2、安装RocketMQ"><a href="#2、安装RocketMQ" class="headerlink" title="2、安装RocketMQ"></a>2、安装RocketMQ</h2><pre><code class="bash"># 进入安装目录cd /usr/local/# 下载RocketMQwget https://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.6.1/rocketmq-all-4.6.1-bin-release.zip# 解压unzip rocketmq-all-4.6.1-bin-release.zip# 重命名安装目录mv rocketmq-all-4.6.1-bin-release rocketmq</code></pre><h2 id="3、调整启动内存"><a href="#3、调整启动内存" class="headerlink" title="3、调整启动内存"></a>3、调整启动内存</h2><p>RocketMQ默认的虚拟机内存较大，启动时可能会因为内存不足导致失败，所以需要调整默认内存</p><pre><code class="bash">vim /usr/local/rocketmq/bin/runserver.shJAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;vim /usr/local/rocketmq/bin/runbroker.shJAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</code></pre><p>参考设置：</p><p>JAVA_OPT&#x3D;“${JAVA_OPT} -server -xms256m -xmx256m -xmn128m -xx</p><h2 id="4、启动RocketMQ"><a href="#4、启动RocketMQ" class="headerlink" title="4、启动RocketMQ"></a>4、启动RocketMQ</h2><pre><code class="bash">nohup sh /usr/local/rocketmq/bin/mqnamesrv &gt; /usr/local/rocketmq/logs/namesrv.log &amp;nohup sh /usr/local/rocketmq/bin/mqbroker -n localhost:9876 &gt; /usr/local/rocketmq/logs/broker.log &amp;</code></pre><h2 id="5、使用脚本管理RocketMQ"><a href="#5、使用脚本管理RocketMQ" class="headerlink" title="5、使用脚本管理RocketMQ"></a>5、使用脚本管理RocketMQ</h2><ol><li><p>编写管理脚本：rocketmq.sh</p><pre><code>#!/usr/bin/env bash## rocketmq - this script starts and stops the rocketmq daemon## chkconfig: - 85 15ROCKETMQ_HOME=/usr/local/rocketmqROCKETMQ_BIN=$&#123;ROCKETMQ_HOME&#125;/binADDR=`hostname -i`:9876LOG_DIR=$&#123;ROCKETMQ_HOME&#125;/logsNAMESERVER_LOG=$&#123;LOG_DIR&#125;/namesrv.logBROKER_LOG=$&#123;LOG_DIR&#125;/broker.log start() &#123;    if [ ! -d $&#123;LOG_DIR&#125; ];then        mkdir $&#123;LOG_DIR&#125;    fi    cd $&#123;ROCKETMQ_HOME&#125;    nohup sh bin/mqnamesrv &gt; $&#123;NAMESERVER_LOG&#125; 2&gt;&amp;1 &amp;    echo -n &quot;The Name Server boot success...&quot;    nohup sh bin/mqbroker -n $&#123;ADDR&#125; &gt; $&#123;BROKER_LOG&#125; 2&gt;&amp;1 &amp;    echo -n &quot;The broker[%s, $&#123;ADDR&#125;] boot success...&quot;&#125;stop() &#123;    cd $&#123;ROCKETMQ_HOME&#125;    sh bin/mqshutdown broker    sleep 1    sh bin/mqshutdown namesrv&#125;restart() &#123;    stop    sleep 10    start&#125;  case &quot;$1&quot; in    start)        start    ;;    stop)        stop    ;;    restart)        restart    ;;    *)echo $&quot;Usage: $0 &#123;start|stop|restart&#125;&quot;exit 2esac</code></pre></li><li><p>将rocketmq服务添加为开机启动服务</p><pre><code class="bash">chmod a+x rocketmq.shsudo mv rocketmq.sh /etc/init.d/rocketmqchkconfig --add rocketmq</code></pre></li><li><p>通过service命令来管理rocketmq</p><pre><code class="bash"># 启动：service rocketmq start# 关闭service rocketmq stop# 重启service rocketmq restart</code></pre></li></ol><h2 id="5、安装可视化服务配置"><a href="#5、安装可视化服务配置" class="headerlink" title="5、安装可视化服务配置"></a>5、安装可视化服务配置</h2><ol><li><p>下载源码：<a href="https://github.com/apache/incubator-rocketmq-externals">https://github.com/apache/incubator-rocketmq-externals</a></p></li><li><p>根据说明文档以及实际需求更改配置文件：application.properties</p></li><li><p>修改依赖：</p><p>修改 <code>pom.xml</code> ，修改RocketMQ相关依赖的版本，找到</p><pre><code>&lt;rocketmq.version&gt;4.4.0&lt;/rocketmq.version&gt;</code></pre><p>改为自己的版本，本文使用的为：4.6.1</p></li><li><p>修改代码</p><p>修改pom.xml后,org.apache.rocketmq.console.service.impl.MessageServiceImpl#queryMessageByTopic编译会报错，所以需要修改一下：将：<br>DefaultMQPullConsumer consumer &#x3D; new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP, null);<br>改为：<br>RPCHook rpcHook &#x3D; null;<br>DefaultMQPullConsumer consumer &#x3D; new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP, rpcHook);</p></li><li><p>打包构建：</p><pre><code class="bash"># 切换到代码根目录cd rocketmq-externals# 切换到控制台目录cd rocketmq-console# 构建mvn clean package -DskipTests</code></pre><p>&#96;&#96;&#96;bash</p><h1 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h1><p>mkdir -p &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;rocketmq-console&#x2F;data</p><h1 id="上传rocketmq-console-ng-1-0-1-jar到-x2F-usr-x2F-local-x2F-rocketmq-x2F-rocketmq-console"><a href="#上传rocketmq-console-ng-1-0-1-jar到-x2F-usr-x2F-local-x2F-rocketmq-x2F-rocketmq-console" class="headerlink" title="上传rocketmq-console-ng-1.0.1.jar到&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;rocketmq-console"></a>上传rocketmq-console-ng-1.0.1.jar到&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;rocketmq-console</h1><h1 id="在-x2F-usr-x2F-local-x2F-rocketmq-x2F-rocketmq-console-x2F-data-创建账号脚本users-properties"><a href="#在-x2F-usr-x2F-local-x2F-rocketmq-x2F-rocketmq-console-x2F-data-创建账号脚本users-properties" class="headerlink" title="在&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;rocketmq-console&#x2F;data 创建账号脚本users.properties"></a>在&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;rocketmq-console&#x2F;data 创建账号脚本users.properties</h1><h1 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h1><h1 id="username-x3D-password-N-1-管理员，0：普通用户"><a href="#username-x3D-password-N-1-管理员，0：普通用户" class="headerlink" title="username&#x3D;password[,N] 1:管理员，0：普通用户"></a>username&#x3D;password[,N] 1:管理员，0：普通用户</h1><p>#定义管理员<br>admin&#x3D;admin,1</p></li></ol><p>#定义普通用户<br>user1&#x3D;user0<br>user2&#x3D;user0</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>java -jar &#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;rocketmq-console&#x2F;rocketmq-console-ng-1.0.1.jar<br>&#96;&#96;&#96;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、安装JDK&quot;&gt;&lt;a href=&quot;#1、安装JDK&quot; class=&quot;headerlink&quot; title=&quot;1、安装JDK&quot;&gt;&lt;/a&gt;1、安装JDK&lt;/h2&gt;&lt;p&gt;Oracle官网下载jdk，并上传到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;目录下，本文</summary>
      
    
    
    
    <category term="消息队列" scheme="https://blog.jiang4yu.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RocketMQ单机版" scheme="https://blog.jiang4yu.com/tags/RocketMQ%E5%8D%95%E6%9C%BA%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装GitLab</title>
    <link href="https://blog.jiang4yu.com/2020/02/29/CentOS7-%E5%AE%89%E8%A3%85GitLab/"/>
    <id>https://blog.jiang4yu.com/2020/02/29/CentOS7-%E5%AE%89%E8%A3%85GitLab/</id>
    <published>2020-02-29T10:53:50.000Z</published>
    <updated>2024-03-30T06:44:25.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加gitlab源"><a href="#添加gitlab源" class="headerlink" title="添加gitlab源"></a>添加gitlab源</h1><p>新建 gitlab-ce.repo</p><pre><code class="bash">vi /etc/yum.repos.d/gitlab-ce.repo# 添加如下内容[gitlab-ce]name=Gitlab CE Repositorybaseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/gpgcheck=0enabled=1# 再执行yum makecache</code></pre><h1 id="安装和配置必要的依赖"><a href="#安装和配置必要的依赖" class="headerlink" title="安装和配置必要的依赖"></a>安装和配置必要的依赖</h1><pre><code class="bash">yum install -y curl policycoreutils-python openssh-server</code></pre><h1 id="安装Postfix来实现邮件通知"><a href="#安装Postfix来实现邮件通知" class="headerlink" title="安装Postfix来实现邮件通知"></a>安装Postfix来实现邮件通知</h1><pre><code class="bash">yum install -y postfix &amp;&amp; systemctl enable postfix &amp;&amp; systemctl start postfix</code></pre><h1 id="安装指定版本的gitlab-ce"><a href="#安装指定版本的gitlab-ce" class="headerlink" title="安装指定版本的gitlab-ce"></a>安装指定版本的gitlab-ce</h1><pre><code class="bash">yum list gitlab-ceyum install -y gitlab-ce-12.8.1-ce.0.el7.x86_64</code></pre><h1 id="配置gitlab"><a href="#配置gitlab" class="headerlink" title="配置gitlab"></a>配置gitlab</h1><pre><code class="bash">vim /etc/gitlab/gitlab.rb# 改 external_url &#39;http://gitlab.example.com&#39;# 为 external_url &#39;http://10.0.170.1&#39;</code></pre><h1 id="应用配置好的配置"><a href="#应用配置好的配置" class="headerlink" title="应用配置好的配置"></a>应用配置好的配置</h1><pre><code class="bash">gitlab-ctl reconfigure# 查看状态gitlab-ctl status</code></pre><h1 id="登录页面初始化用户密码"><a href="#登录页面初始化用户密码" class="headerlink" title="登录页面初始化用户密码"></a>登录页面初始化用户密码</h1><p><a href="http://10.0.170.1/">http://10.0.170.1</a><br>密码：Jiang$Yu5201314</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;添加gitlab源&quot;&gt;&lt;a href=&quot;#添加gitlab源&quot; class=&quot;headerlink&quot; title=&quot;添加gitlab源&quot;&gt;&lt;/a&gt;添加gitlab源&lt;/h1&gt;&lt;p&gt;新建 gitlab-ce.repo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ba</summary>
      
    
    
    
    <category term="DevOps" scheme="https://blog.jiang4yu.com/categories/DevOps/"/>
    
    
    <category term="CentOS7" scheme="https://blog.jiang4yu.com/tags/CentOS7/"/>
    
    <category term="GitLab" scheme="https://blog.jiang4yu.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Redis系列：1.CentOS7安装Redis</title>
    <link href="https://blog.jiang4yu.com/2020/02/26/Redis%E7%B3%BB%E5%88%97%EF%BC%9A1-CentOS7%E5%AE%89%E8%A3%85Redis/"/>
    <id>https://blog.jiang4yu.com/2020/02/26/Redis%E7%B3%BB%E5%88%97%EF%BC%9A1-CentOS7%E5%AE%89%E8%A3%85Redis/</id>
    <published>2020-02-26T10:10:15.000Z</published>
    <updated>2024-03-30T06:44:25.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、下载源码并编译安装"><a href="#1、下载源码并编译安装" class="headerlink" title="1、下载源码并编译安装"></a>1、下载源码并编译安装</h2><pre><code class="bash">cd /optwget http://download.redis.io/releases/redis-5.0.7.tar.gz# 解压tar xzf redis-5.0.7.tar.gz# 编译cd redis-5.0.7make# 安装到/usr/local/redismake PREFIX=/usr/local/redis install# 复制解压目录下的配置文件到安装目录/usr/local/redis下cp /opt/redis-5.0.7/redis.conf /usr/local/redis/bin/# 启动服务端/usr/local/redis/bin/redis-server</code></pre><h2 id="2、Redis配置详解"><a href="#2、Redis配置详解" class="headerlink" title="2、Redis配置详解"></a>2、Redis配置详解</h2><pre><code class="bash"># 修改配置文件vim /usr/local/redis/bin/redis.conf# 前10个# 1.默认不是以守护进程的方式运行，将daemonize no改为daemonize yes以守护进程的方式运行：    daemonize yes# 2.当redis以守护进程方式运行时，会默认将pid写在/var/run/redis.pid文件，可以通过修改pidfile的选项，指定文件位置    pidfile /var/run/redis.pid# 3.Redis的监听端口默认为：6379，可以通过修改port选项进行修改    port 6379# 4.绑定允许访问主机的地址，默认为：127.0.0.1可以通过修改bind选项进行修改    bind 127.0.0.1# 5.设置客户端限制后，多长时间进行断开连接，默认为300，可以通过修改timeout进行设定，如果设置为0则表示关闭该功能    timeout 300# 6.指定日志记录级别，默认为verbose，共四个级别：debug、verbose、notice、warning    loglevel verbose# 7.日志记录方式，默认为标准输出，如果Redis使用守护进程方式运行，这里又配置为标志输出，那么日志将发送给 /dev/null    logfile stdout# 8.设置数据库的数量，默认数据库数量为16个，可以通过修改databases 进行设定    databases 16# 9.指定在多长时间内，又多少次更新操作后，就将数据同步到数据文件，可以通过修改 save进行设置    save &lt;seconds&gt; &lt;changes&gt;    默认配置文件中提供了三个条件:    save 900 1    save 300 10    save 60 10000    分别表示:    900秒 1个更改    300秒 10个更改    60秒  10000个更改# 10.指定存储到本地数据库的数据是否进行压缩，默认yes，Redis采用的时LZF压缩算法，如果为了节省CPU时间可以关闭，但是会导致数据文件巨大，占用磁盘空间rdbcompression yes# 中间10个# 11.指定本地数据库文件名，默认为dump.rdb    dbfilename dump.rdb# 12.指定本地数据库存放的目录    dir ./# 13.设置当机器为从机slav服务时，设置主机master的服务IP以及端口，在启动Redis时，会自动从master同步数据    slaveof &lt;masterip&gt; &lt;masterport&gt;# 14.当master服务设置了密码保护时，slav服务连接master需要密码    masterauth &lt;master-password&gt;# 15.设置Redis连接密码，如果配置了连接密码，客服端在连接Redis时需要通过 AUTH &lt;password&gt;命令提供密码，默认时关闭的    requirepass foobared# 16.设置同一时间客户端连接的最大数，默认是无限制的，maxclients 0表示无限制，当超过限制后，就会报 max number of clients reached 错误    maxclients 128# 17.指定Redis最大内存限制，Redis启动时会把数据加载到内存中，当达到最大内存后Redis会先尝试清除已到期或者即将到期的key，如果这样操作之后仍然达到最大值，那么不能再进行写操作，只能进行读操作，默认为服务器最终内存    maxmemory &lt;bytes&gt;# 18.指定是否再每次更新操作后进行日志记录，Redis默认情况下是异步将数据写入磁盘，如果不开启可能在断电后造成数据丢失，因为redis本身同步数据文件是按照配置的save条件来同步的，所有的数据可能在内存中，默认值为 no    appendonly no# 19.指定更新的文件名，默认为appendonly.aof    appendfilename appendonly.aof# 20.指定更新日志条件，共有三个可选值    no # 表示等操作系统进行数据缓存到同步    always # 表示每次更新操作后手动调节fsync(),将数据写到磁盘，慢但是安全，    everysec # 表示每秒同步一次，折中方案，默认值# 结尾10个# 21.是否启用虚拟内存机制，默认值为no，vm机制将数据分页存放，由Redis将访问量较少的页，放到swap磁盘，访问多的页面有磁盘放到内存    vm-enabled no# 22.虚拟内存文件的路径，默认值为/tmp/redis.swap,不可以多个Redis实例共享    vm-swap-file /tmp/redis.swap# 23.将所有大于最大虚拟内存的数据存入虚拟内存，不论vm-max-memoryz设置多少，所有，索引数据都是内存存储的，也就是说，当vm-max-memory设置为0时，就是将所有的value存放在磁盘之中，默认值为0    vm-max-memory 0# 24.Redis swap文件分成了很多page，一个对象可以保存在多个page上，但是一个page上不能被多个对象共享，vm-page-size时要根据存储的数据大小来设定，官方建议，如果是存放很多小对象，page最好设置为32bytes或者64bytes；如果存储对象很大，就用更大的page，若是不确定就用默认值    vm-page-size 32# 25.设置swap文件中的page数量，由于页表是存放在内存中的，在磁盘上每8个page就会消耗1个byte的内存    vm-pages 134217728# 26.设置访问swap文件的线程数，最好不要超过机器的cpu核心数，如果设置为0，那么所有的swap文件都是串行的，可能会导致较长时间的延迟，默认值为4    vm-max-threads 4# 27.设置在向客服端应答时，是否把较小的包合并为一个包进行发送，默认开启    glueoutputbuf yes# 28.指定在超过一定数量或者最大的元素超过临界值时，采用一种特殊的哈希算法    hash-max-zipmap-entries 64    hash-max-zimap-value 512# 29.指定是否激活重置hash，默认开启    activerehashing yes# 指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又又自己的特定配置文件    include /path/to/local.conf</code></pre><h2 id="3、自定义配置"><a href="#3、自定义配置" class="headerlink" title="3、自定义配置"></a>3、自定义配置</h2><p>进入redis.conf所在的目录进行修改配置</p><pre><code class="bash">daemonize yesbind 127.0.0.1 #注释掉，允许本机外的机器访问requirepass 设置密码</code></pre><h2 id="4、启动Redis"><a href="#4、启动Redis" class="headerlink" title="4、启动Redis"></a>4、启动Redis</h2><h3 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h3><pre><code class="bash">/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf</code></pre><h3 id="客服端启动"><a href="#客服端启动" class="headerlink" title="客服端启动"></a>客服端启动</h3><pre><code class="bash">/usr/local/redis/bin/redis-cli -h ip -p port -a password</code></pre><h3 id="关闭Redis"><a href="#关闭Redis" class="headerlink" title="关闭Redis"></a>关闭Redis</h3><p>第一种，非正常关闭</p><pre><code class="bash">ps -ef | grep -i rediskill -9 PID</code></pre><p>第二种，正常关闭，通过客户端进行shutdown</p><pre><code class="bash">/usr/local/redis/bin/redis-cli  shutdown -a password</code></pre><h2 id="5、设置开启启动"><a href="#5、设置开启启动" class="headerlink" title="5、设置开启启动"></a>5、设置开启启动</h2><h3 id="新建服务"><a href="#新建服务" class="headerlink" title="新建服务"></a>新建服务</h3><pre><code class="bash">chmod 644 /usr/local/redis/bin/redis.confvim /usr/lib/systemd/system/redis.service# 内容如下：[Unit]Description=RedisAfter=network.target[Service]Type=forkingPIDFile=/var/run/redis_6379.pidExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf --daemonize yesExecStop=/usr/local/bin/redis-cli -p 6379 shutdwn -a jiangyu5201314Restart =always[Install]WantedBy=multi-user.target</code></pre><h3 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h3><pre><code class="bash">systemctl daemon-reloadsystemctl enable redis.servicesystemctl start redis.service</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、下载源码并编译安装&quot;&gt;&lt;a href=&quot;#1、下载源码并编译安装&quot; class=&quot;headerlink&quot; title=&quot;1、下载源码并编译安装&quot;&gt;&lt;/a&gt;1、下载源码并编译安装&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cd /opt
wget </summary>
      
    
    
    
    <category term="数据库" scheme="https://blog.jiang4yu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis安装" scheme="https://blog.jiang4yu.com/tags/Redis%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列：1.CentOS7安装MySQL数据库</title>
    <link href="https://blog.jiang4yu.com/2020/02/26/MySQL%E7%B3%BB%E5%88%97%EF%BC%9A1-CentOS7%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://blog.jiang4yu.com/2020/02/26/MySQL%E7%B3%BB%E5%88%97%EF%BC%9A1-CentOS7%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-02-26T00:10:15.000Z</published>
    <updated>2024-03-30T06:44:25.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、下载并安装MySQL源"><a href="#1、下载并安装MySQL源" class="headerlink" title="1、下载并安装MySQL源"></a>1、下载并安装MySQL源</h1><pre><code class="bash">yum -y install wgetwget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpmyum -y localinstall mysql57-community-release-el7-8.noarch.rpmyum -y install mysql-community-server# 检查mysql源是否安装成功yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code></pre><h1 id="2、启动MySQL服务并开启开机自启动"><a href="#2、启动MySQL服务并开启开机自启动" class="headerlink" title="2、启动MySQL服务并开启开机自启动"></a>2、启动MySQL服务并开启开机自启动</h1><pre><code class="bash">systemctl start mysqldsystemctl enable mysqldsystemctl daemon-reload</code></pre><h1 id="3、修改root本地登录密码"><a href="#3、修改root本地登录密码" class="headerlink" title="3、修改root本地登录密码"></a>3、修改root本地登录密码</h1><pre><code class="bash"># 获取安装时的临时密码,在第一次登录时需要使用这个密码grep &#39;temporary password&#39; /var/log/mysqld.log# 登录数据库mysql -u root -p# 修改密码ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Jiang#Yu5201314&#39;;# 密码：Jiang#Yu5201314# 备注 mysql5.7默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位</code></pre><h1 id="4、设置允许远程登录"><a href="#4、设置允许远程登录" class="headerlink" title="4、设置允许远程登录"></a>4、设置允许远程登录</h1><p>Mysql默认不允许远程登录，我们需要设置下，并且防火墙开放3306端口或者关闭防火墙；</p><pre><code class="bash"># mysql -u root -pGRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;Jiang#Yu5201314&#39; WITH GRANT OPTION;\qfirewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --reload</code></pre><h1 id="5、配置默认编码为UTF-8"><a href="#5、配置默认编码为UTF-8" class="headerlink" title="5、配置默认编码为UTF-8"></a>5、配置默认编码为UTF-8</h1><p>修改&#x2F;etc&#x2F;my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p><pre><code>[mysqld]character_set_server=utf8init_connect=&#39;SET NAMES utf8&#39;</code></pre><p>编辑保存完 重启mysql服务: systemctl restart mysqld<br>查看编码：</p><pre><code class="bash">mysql&gt; show variables like &#39;%character%&#39;;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、下载并安装MySQL源&quot;&gt;&lt;a href=&quot;#1、下载并安装MySQL源&quot; class=&quot;headerlink&quot; title=&quot;1、下载并安装MySQL源&quot;&gt;&lt;/a&gt;1、下载并安装MySQL源&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;yum -</summary>
      
    
    
    
    <category term="数据库" scheme="https://blog.jiang4yu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://blog.jiang4yu.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate Validator</title>
    <link href="https://blog.jiang4yu.com/2020/02/22/Hibernate-Validator/"/>
    <id>https://blog.jiang4yu.com/2020/02/22/Hibernate-Validator/</id>
    <published>2020-02-22T14:14:45.000Z</published>
    <updated>2024-03-30T06:44:25.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate-Validator"><a href="#Hibernate-Validator" class="headerlink" title="Hibernate Validator"></a>Hibernate Validator</h1><table><thead><tr><th>注解名</th><th>注解描述</th></tr></thead><tbody><tr><td>@NotNull</td><td>值不能为空</td></tr><tr><td>@Null</td><td>值必须为空</td></tr><tr><td>@Pattern(regex&#x3D;)</td><td>字符串必须匹配正则表达式</td></tr><tr><td>@Size(min&#x3D;,max&#x3D;)</td><td>集合的元素数量必须在min和max之间</td></tr><tr><td>@CredCardNumber(ignoreNonDigitCharacter&#x3D;)</td><td>字符串必须是信用卡卡号（美国国家标准）</td></tr><tr><td>@Email</td><td>字符串必须是Email地址</td></tr><tr><td>@Length(min&#x3D;,max&#x3D;)</td><td>检查字符串的长度</td></tr><tr><td>@NotBlank</td><td>字符串必须有字符</td></tr><tr><td>@NotEmpty</td><td>字符串不为null，集合必须有元素</td></tr><tr><td>@Range(min&#x3D;,max&#x3D;)</td><td>数字必须大于等于min，小于等于max</td></tr><tr><td>@SafeHtml</td><td>字符串必须是安全的html</td></tr><tr><td>@URL</td><td>字符串必须是合法的URL</td></tr><tr><td>@AsserFalse</td><td>值必须是false</td></tr><tr><td>@AsserTrue</td><td>值必须是true</td></tr><tr><td>@DecimalMax(value,inclusive&#x3D;)</td><td>值必须小于等于(inclusive&#x3D;true)&#x2F;小于(inclusive&#x3D;false)value属性指定的值；可以使用在字符串类型的属性上</td></tr><tr><td>@DecimalMin(value,inclusive&#x3D;)</td><td>值必须大于等于(inclusive&#x3D;true)&#x2F;大于(inclusive&#x3D;false)value属性指定的值；可以使用在字符串类型的属性上</td></tr><tr><td>@Digits(integer&#x3D;,fraction&#x3D;)</td><td>数字格式检查，integer指定整数部分的最大长度，fraction指定小数部分的最大长度</td></tr><tr><td>@Future</td><td>值必须是未来的日期</td></tr><tr><td>@Past</td><td>值必须是过去的日期</td></tr><tr><td>@Max(value&#x3D;)</td><td>值必须小于等于value指定的值，不能用在字符串类型的属性上</td></tr><tr><td>@Min(value&#x3D;)</td><td>值必须大于value指定的值，不能用在字符串类型的属性上</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hibernate-Validator&quot;&gt;&lt;a href=&quot;#Hibernate-Validator&quot; class=&quot;headerlink&quot; title=&quot;Hibernate Validator&quot;&gt;&lt;/a&gt;Hibernate Validator&lt;/h1&gt;&lt;tabl</summary>
      
    
    
    
    <category term="JavaEE" scheme="https://blog.jiang4yu.com/categories/JavaEE/"/>
    
    <category term="注解校验" scheme="https://blog.jiang4yu.com/categories/JavaEE/%E6%B3%A8%E8%A7%A3%E6%A0%A1%E9%AA%8C/"/>
    
    
    <category term="常用注解" scheme="https://blog.jiang4yu.com/tags/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装与管理系统初始化</title>
    <link href="https://blog.jiang4yu.com/2020/02/22/CentOS7%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://blog.jiang4yu.com/2020/02/22/CentOS7%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2020-02-22T14:06:39.000Z</published>
    <updated>2024-03-30T06:44:25.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS7安装与管理教程"><a href="#CentOS7安装与管理教程" class="headerlink" title="CentOS7安装与管理教程"></a>CentOS7安装与管理教程</h1><h2 id="1-配置网络"><a href="#1-配置网络" class="headerlink" title="1. 配置网络"></a>1. 配置网络</h2><pre><code class="bash"># 查询网卡信息ip addr show# 备份网络配置cp -rf /etc/sysconfig/network-scripts/ifcfg-ens32 /etc/sysconfig/network-scripts/ifcfg-ens32-back# 配置网络sed -i &quot;s/BOOTPROTO=static/BOOTPROTO=static/g&quot; /etc/sysconfig/network-scripts/ifcfg-ens32sed -i &quot;s/ONBOOT=no/ONBOOT=yes/g&quot; /etc/sysconfig/network-scripts/ifcfg-ens32cat &gt;&gt;/etc/sysconfig/network-scripts/ifcfg-ens32&lt;&lt;EOFIPADDR=11.0.0.4GATEWAY=11.0.0.2NETMASK=255.0.0.0DNS1=11.0.0.2NM_CONTROLLED=noEOF# 重启网络服务systemctl restart network# 测试网络ping -c4 baidu.com</code></pre><h2 id="2-关闭防火墙"><a href="#2-关闭防火墙" class="headerlink" title="2. 关闭防火墙"></a>2. 关闭防火墙</h2><pre><code class="bash"># 停止防火墙服务systemctl stop firewalld# 移除防火墙开机自启动systemctl disable firewalld</code></pre><h2 id="3-关闭-selinux"><a href="#3-关闭-selinux" class="headerlink" title="3. 关闭 selinux"></a>3. 关闭 selinux</h2><pre><code class="bash"># 临时关闭setenforce 0# 永久关闭sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config# 重启系统init 6</code></pre><h2 id="4-开启-SSH服务"><a href="#4-开启-SSH服务" class="headerlink" title="4. 开启 SSH服务"></a>4. 开启 SSH服务</h2><pre><code class="bash"># 配置 SSH 服务# 禁用默认的22端口，将22端口改为47422端口或者其他端口sed -i &quot;s/#Port 22/Port 47422/g&quot; /etc/ssh/sshd_config# 允许root远程连接，若不允许则改为nosed -i &quot;s/#PermitRootLogin yes/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config# 禁止SSH密码尝试失败次数为 6 次sed -i &quot;s/#MaxAuthTries 6/MaxAuthTries 6/g&quot; /etc/ssh/sshd_config# 设置SSH空闲超过15分钟后退出sed -i &quot;s/#ClientAliveInterval 0/ClientAliveInterval 900/g&quot; /etc/ssh/sshd_configsed -i &quot;s/#ClientAliveCountMax 0/ClientAliveCountMax 0/g&quot; /etc/ssh/sshd_config# 开启 SSH 服务systemctl start sshd.service# 允许开机自启动systemctl enable sshd.service</code></pre><h2 id="5-安装仓库源"><a href="#5-安装仓库源" class="headerlink" title="5. 安装仓库源"></a>5. 安装仓库源</h2><p><strong>注意：阿里、华为二选一即可</strong></p><pre><code class="bash"># 阿里Base仓库源curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo# 华为Base仓库源curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo# 阿里EPEL仓库源curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo# 华为EPEL仓库源sed -i &quot;s/#baseurl/baseurl/g&quot; /etc/yum.repos.d/epel.reposed -i &quot;s/metalink/#metalink/g&quot; /etc/yum.repos.d/epel.reposed -i &quot;s@http://download.fedoraproject.org/pub@https://mirrors.huaweicloud.com@g&quot; /etc/yum.repos.d/epel.repo# 清理yum缓存yum clean all# 重新生成yum缓存yum makecache</code></pre><h2 id="6-安装工具包"><a href="#6-安装工具包" class="headerlink" title="6. 安装工具包"></a>6. 安装工具包</h2><pre><code class="bash"># 安装基础组件包yum -y groupinstall &quot;Base&quot; &quot;Compatibility Libraries&quot; &quot;Debugging Tools&quot; &quot;Development Tools&quot; &quot;System Adminstration Tools&quot; &quot;Dial-Up Networking Support&quot; &quot;Hardware Monitoring Utilities&quot; &quot;Performance Tools&quot;# 安装yum加速插件yum -y install yum-plugin-fastestmirror# 安装yum源增强工具yum -y install yum-utils# 安装命令补全插件yum -y install bash-completion bash-completion-extras# 安装LVM逻辑卷管理工具yum -y install lvm2# 安装系统性能监控工具yum -y install sysstat# 安装网络管理工具yum -y install net-tools# 安装vim编辑器yum -y install vim# 安装wget下载工具yum -y install wget# 安装tree目录工具yum -y install tree# 安装 Windows &lt;---&gt; Linux、Unix文件格式相互转换工具yum -y install dos2unix</code></pre><h2 id="7-移除多余系统内核"><a href="#7-移除多余系统内核" class="headerlink" title="7. 移除多余系统内核"></a>7. 移除多余系统内核</h2><pre><code class="bash"># 1.查看当前系统正在使用的内核信息uname -r# 2.查询当前系统中存在的内核rpm -qa | grep kernel# 3.使用 yum remove 移除与当前系统运行内核版本不符的内核以及内核工具包yum -y remove &lt;需要移除的内核以及内核工具包&gt;# 4.重启系统init 6# 示例如下：# uname -r 结果为：3.10.0-514.16.1.el7.x86_64# rpm -qa | grep kernel 结果如下：# kernel-3.10.0-327.el7.x86_64# kernel-headers-3.10.0-514.6.1.el7.x86_64# kernel-tools-libs-3.10.0-327.el7.x86_64# kernel-3.10.0-514.16.1.el7.x86_64# kernel-tools-3.10.0-327.el7.x86_64## 将与当前系统运行内核版本不符的内核以及内核工具包移除# yum -y remove kernel-3.10.0-327.el7.x86_64 kernel-tools-libs-3.10.0-327.el7.x86_64 kernel-tools-3.10.0-327.el7.x86_64</code></pre><h2 id="8-设置vim为默认编辑器"><a href="#8-设置vim为默认编辑器" class="headerlink" title="8. 设置vim为默认编辑器"></a>8. 设置vim为默认编辑器</h2><pre><code class="bash">echo &quot;alias vi=vim&quot; &gt;&gt;/etc/profilesource /etc/profile</code></pre><h2 id="9-vim配置"><a href="#9-vim配置" class="headerlink" title="9. vim配置"></a>9. vim配置</h2><pre><code class="bash">cat &gt;&gt; /etc/vimrc &lt;&lt;EOFset nuset showmodeset rulerset aiset autoindentset encoding=utf-8set termencoding=utf-8set fileencoding=utf-8set fileencodings=ucs-bom,utf-8,gbk,gb2312,cp936,gb18030,big5,euc-jp,euc-kr,latin-1set shiftwidth=4set tabstop=4inoremap &#39; &#39;&#39;&lt;ESC&gt;iinoremap &quot; &quot;&quot;&lt;ESC&gt;iinoremap ( ()&lt;ESC&gt;iinoremap [ []&lt;ESC&gt;iinoremap &lt; &lt;&gt;&lt;ESC&gt;iinoremap &#123; &#123;&#125;&lt;ESC&gt;isyntax onEOF# 加载vim配置,报错不用处理source /etc/vimrc</code></pre><h2 id="10-修改主机名"><a href="#10-修改主机名" class="headerlink" title="10. 修改主机名"></a>10. 修改主机名</h2><pre><code class="bash">hostnamectl set-hostname &lt;主机名&gt;</code></pre><h2 id="11-附加知识点：防火墙基础"><a href="#11-附加知识点：防火墙基础" class="headerlink" title="11. 附加知识点：防火墙基础"></a>11. 附加知识点：防火墙基础</h2><ul><li><ol><li>firewalld服务启用&#x2F;停用<br>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</li></ol></li><li><ol start="2"><li>配置firewalld-cmd<br>查看版本： firewall-cmd –version<br>查看帮助： firewall-cmd –help<br>显示状态： firewall-cmd –state<br>查看所有打开的端口： firewall-cmd –zone&#x3D;public –list-ports<br>更新防火墙规则： firewall-cmd –reload<br>查看区域信息: firewall-cmd –get-active-zones<br>查看指定接口所属区域： firewall-cmd –get-zone-of-interface&#x3D;eth0<br>拒绝所有包：firewall-cmd –panic-on<br>取消拒绝状态： firewall-cmd –panic-off<br>查看是否拒绝： firewall-cmd –query-panic</li></ol></li><li><ol start="3"><li>端口管理：<br>添加： firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent （–permanent 永久生效，没有此参数重启后失效）<br>重新载入：firewall-cmd –reload<br>查看：firewall-cmd –zone&#x3D; public –query-port&#x3D;80&#x2F;tcp<br>删除：firewall-cmd –zone&#x3D; public –remove-port&#x3D;80&#x2F;tcp –permanent</li></ol></li><li><ol start="4"><li>开启与关闭<br>正式环境下，看需要选择是否使用防火墙，这里为了方便后续配置，就先将其关闭：<br>关闭防火墙： systemctl stop firewalld<br>禁止开机自启： systemctl disable firewalld<br>查看防火墙状态： systemctl status firewalld</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CentOS7安装与管理教程&quot;&gt;&lt;a href=&quot;#CentOS7安装与管理教程&quot; class=&quot;headerlink&quot; title=&quot;CentOS7安装与管理教程&quot;&gt;&lt;/a&gt;CentOS7安装与管理教程&lt;/h1&gt;&lt;h2 id=&quot;1-配置网络&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="CentOS7" scheme="https://blog.jiang4yu.com/categories/CentOS7/"/>
    
    
    <category term="CentOS7" scheme="https://blog.jiang4yu.com/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>自动化博客搭建</title>
    <link href="https://blog.jiang4yu.com/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.jiang4yu.com/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-01-01T03:41:08.000Z</published>
    <updated>2024-03-30T06:44:25.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><p>很早就打算，重新构建一下自己的博客，让博客书写过程更加顺利并减少手动发布的过程，降低自己的工作负荷；(就是为了偷懒)<br>刚好，今天又是新年的伊始，所以重新选择了：<strong>github + hexo + Travis CI</strong>；顺手<strong>记录</strong>、<strong>梳理</strong>、<strong>补充</strong>搭建的每一个过程与细节和趟过的坑，收藏并分享于<strong>疆域</strong>我的个人知识库之中，期望能帮助有需要的朋友。</p><h1 id="1-注册账号建立仓库"><a href="#1-注册账号建立仓库" class="headerlink" title="1. 注册账号建立仓库"></a>1. 注册账号建立仓库</h1><h2 id="1-1-注册-Github-账号"><a href="#1-1-注册-Github-账号" class="headerlink" title="1.1. 注册 Github 账号"></a>1.1. 注册 Github 账号</h2><ul><li><p>1、登录 github 官网：<strong><a href="https://github.com/">https://github.com/</a></strong> ，如下图所示：<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200212225825593.png" alt="github官网"></p></li><li><p>2、输入信息后，点击 <strong>Sign up for GitHub</strong>进入注册页面，如下图所示：<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200212225825594.png" alt="确认页面"></p></li><li><p>3、单击 <strong>Next：Select a plan</strong>，进入团队页面，如下图所示：<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200212225825595.png" alt="团队选择页面"><br>由于创建团队是要花钱的并且我们仅仅是为了搭建个人博客，所以选择免费的即可。</p></li><li><p>4、单击 “Choose Free”，进入欢迎界面，如下图所示，到此Github账号创建基本完毕。<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200212225825596.png" alt="欢迎界面"></p></li></ul><h2 id="1-2-创建空仓库"><a href="#1-2-创建空仓库" class="headerlink" title="1.2. 创建空仓库"></a>1.2. 创建空仓库</h2><ul><li>1、在完成第 1 部分，内容后，不出意外的话，我们将会收到一封来自github的确认邮件，如下图所示：</li></ul><p><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200212225825598.png" alt="确认邮件"></p><ul><li>2、单击 <strong>Verify email address</strong>进行确认并创建一个名为：<strong>username.github.io</strong>的仓库，用于存放自动化生成并且可以直接访问的博客页面，如下图实例：</li></ul><p><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200212225825599.png" alt="仓库实例"></p><ul><li>3、进入 <a href="https://github.com/new">新建仓库页面</a>，再次创建一个名为：<strong>myblog</strong>私有化仓库用于存放博客源码，如下图实例：</li></ul><p><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200212225825510.png" alt="再次创建仓库"></p><h2 id="1-3-仓库作用介绍"><a href="#1-3-仓库作用介绍" class="headerlink" title="1.3. 仓库作用介绍"></a>1.3. 仓库作用介绍</h2><table><thead><tr><th>仓库</th><th>属性</th><th>用途</th></tr></thead><tbody><tr><td>myblog</td><td>private</td><td>存放博客源码</td></tr><tr><td>username.github.io</td><td>public</td><td>存放自动化生成的博客页面</td></tr></tbody></table><h1 id="2-写作环境搭建"><a href="#2-写作环境搭建" class="headerlink" title="2. 写作环境搭建"></a>2. 写作环境搭建</h1><p>下面将完成基本博客写作环境的搭建。</p><h2 id="2-1-Git-安装与相关配置"><a href="#2-1-Git-安装与相关配置" class="headerlink" title="2.1. Git 安装与相关配置"></a>2.1. Git 安装与相关配置</h2><h3 id="2-1-1-下载并安装git工具"><a href="#2-1-1-下载并安装git工具" class="headerlink" title="2.1.1. 下载并安装git工具"></a>2.1.1. 下载并安装git工具</h3><ul><li>1、登录<a href="https://git-scm.com/">git官网</a>下载 git<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image_20200213133246.png" alt="git官网"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213140723804.png" alt="具体下载页面"><br>本人认为，现在几乎每个人手里的windows系统都是64位的，所以我们直接选择**64-bit Git for Windows Setup.<strong>，下载项即可，若你是32位系统，请选择</strong>32-bit Git for Windows Setup.**；如何确认自己的系统位数，请自行百度。安装成功后，在桌面鼠标右键单击将会看见下图所示的状态，即为安装成功；安装过程省略，若你需帮助可联系鄙人。<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145148.png" alt="git效果图"><h3 id="2-1-2-生成ssh密钥"><a href="#2-1-2-生成ssh密钥" class="headerlink" title="2.1.2. 生成ssh密钥"></a>2.1.2. 生成ssh密钥</h3>Git安装完成之后，需要做最后一步配置，如果你没做这项配置，是没有ssh公私密钥对的，然而上传代码到远程的github等仓库，是需要验证是不是你本人亲自上传的，所以我们配置并生成一下</li><li><ol><li>配置用户信息，<strong>win+R</strong>输入cmd，在弹出的黑窗口中输入如下内容：<pre><code class="bash">git config --global user.name &quot;用户名&quot;git config --global user.email &quot;你的邮箱&quot;</code></pre>虽然用户名和邮箱均可以自我选择，但鄙人建议与github注册时使用的用户名和邮箱保持一致。</li></ol></li><li><ol start="2"><li>生成 ssh 公私密钥对,<strong>win+R</strong>输入cmd，在弹出的黑窗口中输入如下内容：<pre><code class="bash">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></pre>然后三次回车键，如下图所示：<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145149.png" alt="ssh密钥示例"><br>在下面的文件路径：**C:\Users\你的电脑用户名\.ssh\**下，将会出现如下图所示的一组密钥<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145150.png" alt="ssh密钥对"></li></ol></li></ul><table><thead><tr><th>文件名</th><th>文件描述</th></tr></thead><tbody><tr><td>id_rsa</td><td>ssh私钥,不可以泄露给其他人</td></tr><tr><td>id_rsa.pub</td><td>ssh公钥,后面一步将配置到github网站中</td></tr></tbody></table><ul><li>3、在github配置与验证ssh密钥<ol><li>使用文本编辑器打开<strong>id_rsa.pub</strong>文件并复制其中的内容；<br>  <img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145154.png" alt="添加ssh公钥-3"></li><li>打开<a href="https://github.com/settings/keys">github添加密钥页面</a>,添加ssh公钥，如下面的图片所示进行操作:<br>  <img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145151.png" alt="添加ssh公钥-1"><br>  <img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145152.png" alt="添加ssh公钥-2"><br>  <img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145153.png" alt="添加ssh公钥-3"></li><li>验证ssh密钥配置是否成功<br>  <strong>win+R</strong>输入cmd，在弹出的黑窗口中输入如下内容：<pre><code class="bash">ssh git@github.com</code></pre>  中途会有一个确认问题，我们输入<strong>yes</strong>即可，当看见如下字样即配置成功<pre><code class="bash">Hi 。。。</code></pre>  <img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145155.png" alt="ssh公钥配置成功"></li></ol></li></ul><h2 id="2-2-nodejs安装与配置"><a href="#2-2-nodejs安装与配置" class="headerlink" title="2.2. nodejs安装与配置"></a>2.2. nodejs安装与配置</h2><h3 id="2-2-1-下载并安装nodejs工具"><a href="#2-2-1-下载并安装nodejs工具" class="headerlink" title="2.2.1. 下载并安装nodejs工具"></a>2.2.1. 下载并安装nodejs工具</h3><p>登录<a href="https://nodejs.org/en/">nodejs官网</a>下载 nodejs<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213140538262.png" alt="nodejs官网"></p><h3 id="2-2-2-验证nodejs安装成功"><a href="#2-2-2-验证nodejs安装成功" class="headerlink" title="2.2.2. 验证nodejs安装成功"></a>2.2.2. 验证nodejs安装成功</h3><p>执行命令<strong>node -v</strong> 与命令<strong>npm -v</strong>；见到如下图所示结果，即为安装成功！<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145147.png" alt="nodejs验证"></p><h3 id="2-2-3-安装hexo"><a href="#2-2-3-安装hexo" class="headerlink" title="2.2.3. 安装hexo"></a>2.2.3. 安装hexo</h3><p>执行命令：<strong>npm install -g hexo</strong>，如下图所示：<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145162.png" alt="安装hexo-1"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145161.png" alt="安装hexo-2"></p><h2 id="2-3-myblog源码生成与预览博客"><a href="#2-3-myblog源码生成与预览博客" class="headerlink" title="2.3. myblog源码生成与预览博客"></a>2.3. myblog源码生成与预览博客</h2><h3 id="2-3-1-克隆myblog仓库到本地"><a href="#2-3-1-克隆myblog仓库到本地" class="headerlink" title="2.3.1. 克隆myblog仓库到本地"></a>2.3.1. 克隆myblog仓库到本地</h3><ol><li>打开github，找到myblog仓库，并按照下图，复制出仓库的地。<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145160.png" alt="克隆仓库"></li><li>克隆仓库，选择一个专门存放博客的文件夹（最好不要有中文名）然后单击鼠标右键，选择<strong>Git Bash Here</strong>然后输入<strong>git clone</strong>，如下所示<pre><code class="bash">git clone git@github.com:yourname/myblog.git</code></pre><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145163.png" alt="克隆仓库"><h3 id="2-3-2-生成myblog初始化源码"><a href="#2-3-2-生成myblog初始化源码" class="headerlink" title="2.3.2. 生成myblog初始化源码"></a>2.3.2. 生成myblog初始化源码</h3></li><li>另外找一个空的文件夹，执行命令：<strong>hexo init myblog</strong>，生成源码文件<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145164.png" alt="生成博客源码"></li><li>将生成的所有文件，复制到克隆下来的仓库文件夹中；文件目录结构如下图所示<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145165.png" alt="文件目录结构"></li></ol><table><thead><tr><th>文件&#x2F;文件夹</th><th>说明</th></tr></thead><tbody><tr><td>_config.yml</td><td>配置文件</td></tr><tr><td>scaffolds</td><td>一些通用的markdown模板</td></tr><tr><td>source</td><td>编写的markdown文件，_drafts草稿文件，_posts发布的文章</td></tr><tr><td>themes</td><td>博客的主题模板</td></tr><tr><td>.gitignore</td><td>Git提交忽略文件列表</td></tr><tr><td>package.json</td><td>hexo模块的描述文件</td></tr><tr><td>package-lock.json</td><td>记录当前状态下实际安装的各个npm package的具体来源和版本号。</td></tr><tr><td>node_modules</td><td>模块下载时存储的文件</td></tr></tbody></table><h3 id="2-3-3-预览博客"><a href="#2-3-3-预览博客" class="headerlink" title="2.3.3. 预览博客"></a>2.3.3. 预览博客</h3><ol><li>进入目录中，执行命令<strong>hexo server</strong>或者<strong>hexo s</strong>，将会出现如下图所示<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145166.png" alt="预览命令"></li><li>浏览器打开网址：<a href="http://localhost:4000/">http://localhost:4000</a> 进行博客预览，不出意外则会如下图所示的默认博客页面：<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213145166.png" alt="博客默认界面"></li></ol><h1 id="3-博客配置"><a href="#3-博客配置" class="headerlink" title="3. 博客配置"></a>3. 博客配置</h1><p>我们已经成功搭建了基础的博客环境并初始化了默认的博客源码；但是很多的默认内容都是要修改为我们自己的，主要有：</p><ul><li><ol><li>博客基本信息；</li></ol></li><li><ol start="2"><li>让博客的基本配置更友好；</li></ol></li><li><ol start="3"><li>选择自己喜欢的主题等等。</li></ol></li></ul><h2 id="3-1-基本信息配置"><a href="#3-1-基本信息配置" class="headerlink" title="3.1. 基本信息配置"></a>3.1. 基本信息配置</h2><p>Hexo 是一款优秀的博客框架，在使用 Hexo 搭建一个属于自己的博客网站后，我们还需要对其进行配置，使得 Hexo 更能满足自己的需求</p><p>这里所说的配置文件，是位于站点根目录下的 <strong>_config.yml</strong> 文件，可以直接用记事本打开，然后参照<a href="https://hexo.io/zh-cn/docs/index.html">官方说明文档</a>进行编辑即可。</p><p>下面的是我个人编辑并添加中文注释进行说明后的**_config.yml**文档，供各位参考</p><pre><code class="yaml"># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# 网站title: 个人知识库 ## 网站标题subtitle: 姜宇的个人知识库 ## 网站副标题description: 一个系统分析师、设计师、IT技术爱好者的知识、经验以及工具分享小站 ## 网站描述keywords: 系统分析师,设计师,JAVA,MySQL,Linux,CentOS7,前端,VUE ## 网站的关键词。使用半角逗号 , 分隔多个关键词。author: 姜 宇 ## 作者名字language: zh-Hans ## 网站使用的语言,默认是en ，中文网站填zh-Hanstimezone: Asia/Shanghai ## 网站时区,默认为:计算机的预设置，可以不填，中国要填就是Asia/Shanghai(亚洲/上海)# 网址url: http://blog.jiangyu365.com ## URL，如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/root: / ## 网站根目录permalink: :year/:month/:day/:title/ ## 文章的链接格式 ，默认为 :year/:month/:day/:title/permalink_defaults: ## 永久链接中每个段的默认值pretty_urls: ## 通过覆盖 permalink 的值来美化文章的URL  trailing_index: true # 是否在永久链接中保留尾部的 index.html，设置为 false 时去除  trailing_html: true # 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)# 目录设置--一般不要更改source_dir: source ## 资源文件夹，这个文件夹用来存放内容,一般不用进行更改public_dir: public ## 公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags ## 标签文件夹，默认为 tagsarchive_dir: archives ## 归档文件夹，默认为 archivescategory_dir: categories ## 分类文件夹 ，默认为 categoriescode_dir: downloads/code ## 代码目录 ，默认为 downloads/codei18n_dir: :lang ## 国际化（i18n）文件夹skip_render: ## 储存站长验证文件，跳过指定文件的渲染## 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。## skip_render: &quot;mypage/**/*&quot;## 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#39;public&#39; 目录## 你也可以用这种方法来跳过对指定文章文件的渲染## skip_render: &quot;_posts/test-post.md&quot;## 这将会忽略对 &#39;test-post.md&#39; 的渲染# 文章写作设置# 这里是比较常用的写作设置，可以根据自己的写作习惯随时进行调整new_post_name: :title.md ## 文章的文件名格式，默认为 :title.mddefault_layout: post ## 预设的布局模板，默认为 postauto_spacing: true ## 在中文和英文之间加入空格titlecase: false ## 标题是否使用首字母大写 ，默认为 falseexternal_link:  enable: false # 在新标签中打开链接  field: site # 对整个网站（site）生效或仅对文章（post）生效  exclude: &#39;&#39; # 需要排除的域名。主域名和子域名如 www 需分别配置filename_case: 0 # 将文件名转换为 1 小写 或 2 大写，默认为 0 关闭render_drafts: false # 是否显示渲染草稿，默认为 falsepost_asset_folder: true # 是否启用 Asset 文件夹，默认为 false## 这里建议开启这样在进行写文章时，可以将文章中引用到的文件放入后直接引用，可以不用考虑第三方图床等relative_link: false # 是否建立相对于根文件夹的链接，默认为 falsefuture: true # 是否显示未来文章，默认为 true# 代码块设置highlight:  enable: false # 是否使用代码高亮 ，默认为 true，我这里为false，因为我使用的主题有这个要求  line_number: true # 是否显示行号 ，默认为 true  auto_detect: false # 是否自动检测语言 ，默认为 false  tab_replace: &#39;&#39; ## tab 制表符替代设置  wrap: true  hljs: false# 首页设置index_generator:  path: &#39;&#39; ## 首页的根目录，默认为：&#39;&#39;  per_page: 10 ## 每页显示文章的数量，默认为 10  order_by: -date ## 显示文章的顺序，默认为 -date# 分类 &amp; 标签default_category: uncategorized ## 预设分类，默认为 uncategorizedcategory_map: ## 分类别名tag_map: ## 标签别名# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# 日期 / 时间格式：时间和日期的显示格式，一般没特殊要求的也不需要改date_format: YYYY-MM-DD ##日期格式，默认为 YYYY-MM-DDtime_format: HH:mm:ss ## 时间格式，默认为 HH:mm:ss## 启用以后，如果 Front Matter 中没有指定 updated， post.updated 将会使用 date 的值而不是文件的创建时间。use_date_for_updated: false# 分页per_page: 10 # 单个页面上显示的文章数量，默认为 10 ，用 0 表示禁用分页pagination_dir: page #分页目录，默认为 page# Include / Exclude file(s)## include:/exclude: options only apply to the &#39;source/&#39; folderinclude:exclude:ignore:# 主题## 当前主题名称。值为false时禁用主题theme: 3-hexo ## 博客使用的主题，默认为 landscape# 网站部署配置deploy:  type: git ## 网站部署类型，默认为：&#39;&#39;  repo: git@github.com:jiang4yu/jiang4yu.github.io.git ##网站部署地址  branch: master</code></pre><h2 id="3-2-主题设置"><a href="#3-2-主题设置" class="headerlink" title="3.2. 主题设置"></a>3.2. 主题设置</h2><ol><li>下载自己喜欢的主题，例如我这里选择的是<strong>3-hexo</strong>这个主题；</li><li>将它下载下来之后，复制到<strong>themes</strong>文件夹下；</li><li>在**_config.yml文件**中进行引用即可；</li><li>根据你选用的主题进行相应的配置，这里我的主题的配置就忽略，若有需要帮助</li></ol><h2 id="3-3-效果图"><a href="#3-3-效果图" class="headerlink" title="3.3. 效果图"></a>3.3. 效果图</h2><p><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213215856861.png" alt="最终效果图"></p><h1 id="4-自动化发布"><a href="#4-自动化发布" class="headerlink" title="4. 自动化发布"></a>4. 自动化发布</h1><p>配置了博客的基本信息，并按照自己选择的博客主题，进行了配置，可以说博客的搭建工作已经完成了，但是呢，我们要偷懒一下，减少一些指令的操作。</p><h2 id="4-1-Travis-CI-简介"><a href="#4-1-Travis-CI-简介" class="headerlink" title="4.1. Travis CI 简介"></a>4.1. Travis CI 简介</h2><p>Travis CI是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，<br>不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，<br>据说Travis CI每天运行超过4000次完整构建。对于做开源项目或者github的使用者，快将你的项目加入Travis CI构建队列吧!</p><h2 id="4-2-我们的目标需求"><a href="#4-2-我们的目标需求" class="headerlink" title="4.2. 我们的目标需求"></a>4.2. 我们的目标需求</h2><p>将myblog 博客源码以及文章的更新推送到远端的github仓库，然后啥也不管了，交由 Travis CI 自动构建并推送到博客项目的master分支上。</p><h2 id="4-3-自动化配置"><a href="#4-3-自动化配置" class="headerlink" title="4.3. 自动化配置"></a>4.3. 自动化配置</h2><ol><li><p>登录 <a href="https://travis-ci.com/">Travis Pro的官网</a>,也许有人会问，为什么不选用免费版的地址，可能是我强上的姿势不对吧，总是无法获取到私有的myblog仓库，没有其他原因。<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200213215856861.png" alt="Travis Pro的官网"></p></li><li><p>按照下面图片组的步骤进行操作即可，让Travis CI获取到我们的仓库<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/001.png" alt="第1步"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/002.png" alt="第2步"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/003.png" alt="第3步"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/004.png" alt="第4步"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/005.png" alt="第5步"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/006.png" alt="第6步"></p></li><li><p><a href="https://github.com/settings/applications">在GitHub中</a>是否有 Travis CI 应用<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/008.png" alt="Travis CI 应用-1"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/007.png" alt="Travis CI 应用-2"></p></li><li><p><a href="https://github.com/settings/tokens">新建Personal Access Token</a>，只勾选<strong>repo</strong>的权限并创建一个新的token，复制token并保存好！<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/009.png" alt="新建token-1"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/010.png" alt="新建token-2"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/011.png" alt="新建token-3"></p></li><li><p>前往Travis CI 配置token<br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/012.png" alt="配置token-1"><br><img src="/2020/01/01/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/013.png" alt="配置token-2"></p></li><li><p>在myblog中创建 <strong>.travis.yml</strong> 文件，文件内容如下：</p></li></ol><pre><code class="yaml">sudo: falselanguage: node_jsnode_js: - 10 # use nodejs v10 LTScache: npmbefore_install: - git config --global user.name &quot;&lt;your github username&gt;&quot; - git config --global user.email &quot;&lt;your email&gt;&quot; - npm install -g hexo-cliinstall: - npm ibranches: only:  - master # build master branch onlyscript: - hexo clean - hexo generate # generate static filesafter_success: - cd ./public - git init - git add --all . - git commit -m &quot;Travis CI Auto Builder&quot; - git push --quiet --force https://$GH_TOKEN@github.com/&lt;your github username&gt;/&lt;your github username&gt;.github.io.git master</code></pre><p><strong>注意：</strong></p><ul><li><strong>不要改变配置内容缩进；</strong></li><li><strong>将your github username和your email替换为你自己的</strong></li></ul><h2 id="4-4-发布博客"><a href="#4-4-发布博客" class="headerlink" title="4.4. 发布博客"></a>4.4. 发布博客</h2><p>在myblog目录下将<strong>node_modules</strong>文件夹删除后，鼠标右键选择<strong>Git Bash Here</strong> ，然后依次执行下列命令：</p><pre><code class="bash">git add .git commint -m &quot;blog搭建成功&quot;git pullgit push</code></pre><h2 id="4-5-在浏览器中打开你的博客"><a href="#4-5-在浏览器中打开你的博客" class="headerlink" title="4.5. 在浏览器中打开你的博客"></a>4.5. 在浏览器中打开你的博客</h2><pre><code>    https://&lt;your github username&gt;.github.io</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0、前言&quot;&gt;&lt;a href=&quot;#0、前言&quot; class=&quot;headerlink&quot; title=&quot;0、前言&quot;&gt;&lt;/a&gt;0、前言&lt;/h1&gt;&lt;p&gt;很早就打算，重新构建一下自己的博客，让博客书写过程更加顺利并减少手动发布的过程，降低自己的工作负荷；(就是为了偷懒)&lt;br&gt;</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://blog.jiang4yu.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="博客搭建" scheme="https://blog.jiang4yu.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
